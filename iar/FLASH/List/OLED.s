///////////////////////////////////////////////////////////////////////////////
//
// IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM       11/Jul/2017  19:16:13
// Copyright 1999-2014 IAR Systems AB.
//
//    Cpu mode     =  thumb
//    Endian       =  little
//    Source file  =  
//        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\app\OLED.c
//    Command line =  
//        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\app\OLED.c
//        -D LPLD_K60 -D USE_K60F12 -lCN
//        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\FLASH\List\
//        -lB
//        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\FLASH\List\
//        -o
//        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\FLASH\Obj\
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
//        --no_clustering --no_scheduling --debug --endian=little
//        --cpu=Cortex-M4F -e --fpu=None --dlib_config
//        D:\IAR\arm\INC\c\DLib_Config_Normal.h -I
//        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\app\
//        -I
//        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\CPU\
//        -I
//        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\common\
//        -I
//        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\LPLD\
//        -I
//        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\LPLD\HW\
//        -I
//        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\LPLD\DEV\
//        -I
//        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\LPLD\FUNC\
//        -I
//        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\uCOS-II\Ports\
//        -I
//        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\uCOS-II\Source\
//        -I
//        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\FatFs\
//        -I
//        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\FatFs\option\
//        -I
//        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\USB\common\
//        -I
//        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\USB\driver\
//        -I
//        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\USB\descriptor\
//        -I
//        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\USB\class\
//        -Ol -I D:\IAR\arm\CMSIS\Include\ -D ARM_MATH_CM4
//    List file    =  
//        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\FLASH\List\OLED.s
//
///////////////////////////////////////////////////////////////////////////////

        #define SHT_PROGBITS 0x1

        EXTERN Ahead_TurnError
        EXTERN Debug_Page_Slt
        EXTERN Debug_Para_Slt
        EXTERN Dir_IslandTurn
        EXTERN Error
        EXTERN Flag_Island
        EXTERN Flag_Island_Confirm
        EXTERN LPLD_GPIO_Output_b
        EXTERN LPLD_LPTMR_DelayMs
        EXTERN OLED_P14x16Str
        EXTERN SendCommand
        EXTERN ShowOrDebug
        EXTERN Show_Page_Slt
        EXTERN Sum_Distance
        EXTERN Turn_Around
        EXTERN __aeabi_cfcmple
        EXTERN __aeabi_f2iz
        EXTERN __aeabi_fmul
        EXTERN final
        EXTERN peak
        EXTERN peak_real

        PUBLIC Draw_BMP
        PUBLIC F6x8
        PUBLIC F8X16
        PUBLIC LIBLOGO60x58
        PUBLIC OLED_6x8Char
        PUBLIC OLED_CLS
        PUBLIC OLED_Fill
        PUBLIC OLED_P6x8Str
        PUBLIC OLED_P8x16Str
        PUBLIC OLED_Print
        PUBLIC OLED_Print_Float
        PUBLIC OLED_Print_Int
        PUBLIC OLED_Print_RowPic
        PUBLIC OLED_PutPixel
        PUBLIC OLED_Rectangle
        PUBLIC OLED_Set_Pos
        PUBLIC OLED_Stop
        PUBLIC OLED_WrCmd
        PUBLIC OLED_WrDat
        PUBLIC OLED_while


        SECTION `.rodata`:CONST:REORDER:NOROOT(1)
        DATA
        DC8 "-"

        SECTION `.rodata`:CONST:REORDER:NOROOT(1)
        DATA
        DC8 "+"

        SECTION `.rodata`:CONST:REORDER:NOROOT(1)
        DATA
        DC8 "."

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_3:
        DATA
        DC8 "Show:"
        DC8 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_4:
        DATA
        DC8 "Peak_Normal:"
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_5:
        DATA
        DC8 "pk0="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_6:
        DATA
        DC8 "pk1="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_7:
        DATA
        DC8 "pk2="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_8:
        DATA
        DC8 "pk3="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_9:
        DATA
        DC8 "pk4="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_10:
        DATA
        DC8 "pk5="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_11:
        DATA
        DC8 "pk6="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_12:
        DATA
        DC8 "pk7="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_13:
        DATA
        DC8 "Peak_Real:"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_14:
        DATA
        DC8 "Island:"

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_15:
        DATA
        DC8 "Command="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_16:
        DATA
        DC8 "Err="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_17:
        DATA
        DC8 "Confirm="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
        DATA
        DC8 "No"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_19:
        DATA
        DC8 "final="
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
        DATA
        DC8 "Yes"

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_21:
        DATA
        DC8 "Island="

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_22:
        DATA
        DC8 "Ad_Turn="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_23:
        DATA
        DC8 "Left"
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_24:
        DATA
        DC8 "Right"
        DC8 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_25:
        DATA
        DC8 "Bd_Turn="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_26:
        DATA
        DC8 "Sum_Dis"

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_27:
        DATA
        DC8 "Debug:"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
        DATA
        DC8 "->"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_29:
        DATA
        DC8 "STOP!!"
        DC8 0
// C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\app\OLED.c
//    1 #include "Includes.h"
//    2 
//    3 
//    4 /************************************************************************
//    5      OLED 一行可以显示16个字符，可以显示8行。
//    6 ************************************************************************/
//    7 
//    8 #define XLevelL		0x00
//    9 #define XLevelH		0x10
//   10 #define XLevel		((XLevelH&0x0F)*16+XLevelL)
//   11 #define Max_Column	128
//   12 #define Max_Row		64 
//   13 #define	Brightness	0xCF
//   14 
//   15 /*
//   16 4线SPI使用说明：
//   17 VBT 供内部DC-DC电压，3.3~4.3V，如果使用5V电压，为保险起见串一个100~500欧的电阻
//   18 VCC 供内部逻辑电压 1.8~6V
//   19 GND 地
//   20 
//   21 BS0 低电平
//   22 BS1 低电平
//   23 BS2 低电平
//   24 
//   25 CS  片选管脚
//   26 DC  命令数据选择管脚
//   27 RES 模块复位管脚
//   28 D0（SCLK） ，时钟脚，由MCU控制
//   29 D1（MOSI） ，主输出从输入数据脚，由MCU控制
//   30 
//   31 D2 悬空
//   32 D3-D7 ， 低电平 ， 也可悬空，但最好设为低电平
//   33 RD  低电平 ，也可悬空，但最好设为低电平
//   34 RW  低电平 ，也可悬空，但最好设为低电平
//   35 RD  低电平 ，也可悬空，但最好设为低电平
//   36 */
//   37 //
//   38 
//   39 extern uint8 Turn_Around;
//   40 extern uint8 Family_Status;
//   41 extern int peak[];
//   42 extern int E_Max[];
//   43 extern int Target,Feedback;
//   44 extern struct Rudder Angle;
//   45 extern int Error;
//   46 extern long int Sum_Distance;
//   47 extern int Mixed_Distance;
//   48 extern uint8 ShowOrDebug;
//   49 extern int8  Show_Page_Slt;
//   50 extern int8  Debug_Page_Slt;
//   51 extern int8  Debug_Para_Slt;
//   52 extern uint8 peak_real[];
//   53 
//   54 #define X_WIDTH 128
//   55 #define Y_WIDTH 64
//   56 //======================================

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//   57 const uint8 F6x8[][6] =
F6x8:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 7, 0, 7, 0, 0, 20, 127
        DC8 20, 127, 20, 0, 36, 42, 127, 42, 18, 0, 98, 100, 8, 19, 35, 0, 54
        DC8 73, 85, 34, 80, 0, 0, 5, 3, 0, 0, 0, 0, 28, 34, 65, 0, 0, 0, 65, 34
        DC8 28, 0, 0, 20, 8, 62, 8, 20, 0, 8, 8, 62, 8, 8, 0, 0, 0, 160, 96, 0
        DC8 0, 8, 8, 8, 8, 8, 0, 0, 96, 96, 0, 0, 0, 32, 16, 8, 4, 2, 0, 62, 81
        DC8 73, 69, 62, 0, 0, 66, 127, 64, 0, 0, 66, 97, 81, 73, 70, 0, 33, 65
        DC8 69, 75, 49, 0, 24, 20, 18, 127, 16, 0, 39, 69, 69, 69, 57, 0, 60
        DC8 74, 73, 73, 48, 0, 1, 113, 9, 5, 3, 0, 54, 73, 73, 73, 54, 0, 6, 73
        DC8 73, 41, 30, 0, 0, 54, 54, 0, 0, 0, 0, 86, 54, 0, 0, 0, 8, 20, 34
        DC8 65, 0, 0, 20, 20, 20, 20, 20, 0, 0, 65, 34, 20, 8, 0, 2, 1, 81, 9
        DC8 6, 0, 50, 73, 89, 81, 62, 0, 124, 18, 17, 18, 124, 0, 127, 73, 73
        DC8 73, 54, 0, 62, 65, 65, 65, 34, 0, 127, 65, 65, 34, 28, 0, 127, 73
        DC8 73, 73, 65, 0, 127, 9, 9, 9, 1, 0, 62, 65, 73, 73, 122, 0, 127, 8
        DC8 8, 8, 127, 0, 0, 65, 127, 65, 0, 0, 32, 64, 65, 63, 1, 0, 127, 8
        DC8 20, 34, 65, 0, 127, 64, 64, 64, 64, 0, 127, 2, 12, 2, 127, 0, 127
        DC8 4, 8, 16, 127, 0, 62, 65, 65, 65, 62, 0, 127, 9, 9, 9, 6, 0, 62, 65
        DC8 81, 33, 94, 0, 127, 9, 25, 41, 70, 0, 70, 73, 73, 73, 49, 0, 1, 1
        DC8 127, 1, 1, 0, 63, 64, 64, 64, 63, 0, 31, 32, 64, 32, 31, 0, 63, 64
        DC8 56, 64, 63, 0, 99, 20, 8, 20, 99, 0, 7, 8, 112, 8, 7, 0, 97, 81, 73
        DC8 69, 67, 0, 0, 127, 65, 65, 0, 0, 85, 42, 85, 42, 85, 0, 0, 65, 65
        DC8 127, 0, 0, 4, 2, 1, 2, 4, 0, 64, 64, 64, 64, 64, 0, 0, 1, 2, 4, 0
        DC8 0, 32, 84, 84, 84, 120, 0, 127, 72, 68, 68, 56, 0, 56, 68, 68, 68
        DC8 32, 0, 56, 68, 68, 72, 127, 0, 56, 84, 84, 84, 24, 0, 8, 126, 9, 1
        DC8 2, 0, 24, 164, 164, 164, 124, 0, 127, 8, 4, 4, 120, 0, 0, 68, 125
        DC8 64, 0, 0, 64, 128, 132, 125, 0, 0, 127, 16, 40, 68, 0, 0, 0, 65
        DC8 127, 64, 0, 0, 124, 4, 24, 4, 120, 0, 124, 8, 4, 4, 120, 0, 56, 68
        DC8 68, 68, 56, 0, 252, 36, 36, 36, 24, 0, 24, 36, 36, 24, 252, 0, 124
        DC8 8, 4, 4, 8, 0, 72, 84, 84, 84, 32, 0, 4, 63, 68, 64, 32, 0, 60, 64
        DC8 64, 32, 124, 0, 28, 32, 64, 32, 28, 0, 60, 64, 48, 64, 60, 0, 68
        DC8 40, 16, 40, 68, 0, 28, 160, 160, 160, 124, 0, 68, 100, 84, 76, 68
        DC8 20, 20, 20, 20, 20, 20
//   58 {
//   59     { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
//   60     { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
//   61     { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
//   62     { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
//   63     { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
//   64     { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
//   65     { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
//   66     { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
//   67     { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
//   68     { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
//   69     { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
//   70     { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
//   71     { 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
//   72     { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
//   73     { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
//   74     { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
//   75     { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
//   76     { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
//   77     { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
//   78     { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
//   79     { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
//   80     { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
//   81     { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
//   82     { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
//   83     { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
//   84     { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
//   85     { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
//   86     { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
//   87     { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
//   88     { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
//   89     { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
//   90     { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
//   91     { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
//   92     { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
//   93     { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
//   94     { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
//   95     { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
//   96     { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
//   97     { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
//   98     { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
//   99     { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
//  100     { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
//  101     { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
//  102     { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
//  103     { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
//  104     { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
//  105     { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
//  106     { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
//  107     { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
//  108     { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
//  109     { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
//  110     { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
//  111     { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
//  112     { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
//  113     { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
//  114     { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
//  115     { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
//  116     { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
//  117     { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
//  118     { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
//  119     { 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
//  120     { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
//  121     { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
//  122     { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
//  123     { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
//  124     { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
//  125     { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
//  126     { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
//  127     { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
//  128     { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
//  129     { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
//  130     { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
//  131     { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
//  132     { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
//  133     { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
//  134     { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
//  135     { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
//  136     { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
//  137     { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
//  138     { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
//  139     { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
//  140     { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
//  141     { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
//  142     { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
//  143     { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
//  144     { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
//  145     { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v     
//  146     { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
//  147     { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
//  148     { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
//  149     { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
//  150     { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
//  151 };
//  152 
//  153 //======================================================
//  154 // 128X64I液晶底层驱动[8X16]字体库
//  155 // 设计者: powerint
//  156 // 描  述: [8X16]西文字符的字模数据 (纵向取模,字节倒序)
//  157 // !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
//  158 //======================================================

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  159 const uint8 F8X16[]=
F8X16:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0
        DC8 0, 0, 0, 0, 0, 51, 48, 0, 0, 0, 0, 16, 12, 6, 16, 12, 6, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 64, 192, 120, 64, 192, 120, 64, 0, 4, 63, 4, 4, 63
        DC8 4, 4, 0, 0, 112, 136, 252, 8, 48, 0, 0, 0, 24, 32, 255, 33, 30, 0
        DC8 0, 240, 8, 240, 0, 224, 24, 0, 0, 0, 33, 28, 3, 30, 33, 30, 0, 0
        DC8 240, 8, 136, 112, 0, 0, 0, 30, 33, 35, 36, 25, 39, 33, 16, 16, 22
        DC8 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 24, 4, 2
        DC8 0, 0, 0, 0, 7, 24, 32, 64, 0, 0, 2, 4, 24, 224, 0, 0, 0, 0, 64, 32
        DC8 24, 7, 0, 0, 0, 64, 64, 128, 240, 128, 64, 64, 0, 2, 2, 1, 15, 1, 2
        DC8 2, 0, 0, 0, 0, 240, 0, 0, 0, 0, 1, 1, 1, 31, 1, 1, 1, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 128, 176, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 48, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 128, 96, 24, 4, 0, 96, 24, 6, 1, 0, 0, 0, 0, 224, 16
        DC8 8, 8, 16, 224, 0, 0, 15, 16, 32, 32, 16, 15, 0, 0, 16, 16, 248, 0
        DC8 0, 0, 0, 0, 32, 32, 63, 32, 32, 0, 0, 0, 112, 8, 8, 8, 136, 112, 0
        DC8 0, 48, 40, 36, 34, 33, 48, 0, 0, 48, 8, 136, 136, 72, 48, 0, 0, 24
        DC8 32, 32, 32, 17, 14, 0, 0, 0, 192, 32, 16, 248, 0, 0, 0, 7, 4, 36
        DC8 36, 63, 36, 0, 0, 248, 8, 136, 136, 8, 8, 0, 0, 25, 33, 32, 32, 17
        DC8 14, 0, 0, 224, 16, 136, 136, 24, 0, 0, 0, 15, 17, 32, 32, 17, 14, 0
        DC8 0, 56, 8, 8, 200, 56, 8, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 112, 136, 8
        DC8 8, 136, 112, 0, 0, 28, 34, 33, 33, 34, 28, 0, 0, 224, 16, 8, 8, 16
        DC8 224, 0, 0, 0, 49, 34, 34, 17, 15, 0, 0, 0, 0, 192, 192, 0, 0, 0, 0
        DC8 0, 0, 48, 48, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 128, 96, 0
        DC8 0, 0, 0, 0, 0, 128, 64, 32, 16, 8, 0, 0, 1, 2, 4, 8, 16, 32, 0, 64
        DC8 64, 64, 64, 64, 64, 64, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 8, 16, 32, 64
        DC8 128, 0, 0, 0, 32, 16, 8, 4, 2, 1, 0, 0, 112, 72, 8, 8, 8, 240, 0, 0
        DC8 0, 0, 48, 54, 1, 0, 0, 192, 48, 200, 40, 232, 16, 224, 0, 7, 24, 39
        DC8 36, 35, 20, 11, 0, 0, 0, 192, 56, 224, 0, 0, 0, 32, 60, 35, 2, 2
        DC8 39, 56, 32, 8, 248, 136, 136, 136, 112, 0, 0, 32, 63, 32, 32, 32
        DC8 17, 14, 0, 192, 48, 8, 8, 8, 8, 56, 0, 7, 24, 32, 32, 32, 16, 8, 0
        DC8 8, 248, 8, 8, 8, 16, 224, 0, 32, 63, 32, 32, 32, 16, 15, 0, 8, 248
        DC8 136, 136, 232, 8, 16, 0, 32, 63, 32, 32, 35, 32, 24, 0, 8, 248, 136
        DC8 136, 232, 8, 16, 0, 32, 63, 32, 0, 3, 0, 0, 0, 192, 48, 8, 8, 8, 56
        DC8 0, 0, 7, 24, 32, 32, 34, 30, 2, 0, 8, 248, 8, 0, 0, 8, 248, 8, 32
        DC8 63, 33, 1, 1, 33, 63, 32, 0, 8, 8, 248, 8, 8, 0, 0, 0, 32, 32, 63
        DC8 32, 32, 0, 0, 0, 0, 8, 8, 248, 8, 8, 0, 192, 128, 128, 128, 127, 0
        DC8 0, 0, 8, 248, 136, 192, 40, 24, 8, 0, 32, 63, 32, 1, 38, 56, 32, 0
        DC8 8, 248, 8, 0, 0, 0, 0, 0, 32, 63, 32, 32, 32, 32, 48, 0, 8, 248
        DC8 248, 0, 248, 248, 8, 0, 32, 63, 0, 63, 0, 63, 32, 0, 8, 248, 48
        DC8 192, 0, 8, 248, 8, 32, 63, 32, 0, 7, 24, 63, 0, 224, 16, 8, 8, 8
        DC8 16, 224, 0, 15, 16, 32, 32, 32, 16, 15, 0, 8, 248, 8, 8, 8, 8, 240
        DC8 0, 32, 63, 33, 1, 1, 1, 0, 0, 224, 16, 8, 8, 8, 16, 224, 0, 15, 24
        DC8 36, 36, 56, 80, 79, 0, 8, 248, 136, 136, 136, 136, 112, 0, 32, 63
        DC8 32, 0, 3, 12, 48, 32, 0, 112, 136, 8, 8, 8, 56, 0, 0, 56, 32, 33
        DC8 33, 34, 28, 0, 24, 8, 8, 248, 8, 8, 24, 0, 0, 0, 32, 63, 32, 0, 0
        DC8 0, 8, 248, 8, 0, 0, 8, 248, 8, 0, 31, 32, 32, 32, 32, 31, 0, 8, 120
        DC8 136, 0, 0, 200, 56, 8, 0, 0, 7, 56, 14, 1, 0, 0, 248, 8, 0, 248, 0
        DC8 8, 248, 0, 3, 60, 7, 0, 7, 60, 3, 0, 8, 24, 104, 128, 128, 104, 24
        DC8 8, 32, 48, 44, 3, 3, 44, 48, 32, 8, 56, 200, 0, 200, 56, 8, 0, 0, 0
        DC8 32, 63, 32, 0, 0, 0, 16, 8, 8, 8, 200, 56, 8, 0, 32, 56, 38, 33, 32
        DC8 32, 24, 0, 0, 0, 0, 254, 2, 2, 2, 0, 0, 0, 0, 127, 64, 64, 64, 0, 0
        DC8 12, 48, 192, 0, 0, 0, 0, 0, 0, 0, 1, 6, 56, 192, 0, 0, 2, 2, 2, 254
        DC8 0, 0, 0, 0, 64, 64, 64, 127, 0, 0, 0, 0, 0, 4, 2, 2, 2, 4, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 128, 128, 0, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 128, 128, 128, 0, 0, 0, 25, 36, 34, 34, 34, 63, 32, 8, 248, 0
        DC8 128, 128, 0, 0, 0, 0, 63, 17, 32, 32, 17, 14, 0, 0, 0, 0, 128, 128
        DC8 128, 0, 0, 0, 14, 17, 32, 32, 32, 17, 0, 0, 0, 0, 128, 128, 136
        DC8 248, 0, 0, 14, 17, 32, 32, 16, 63, 32, 0, 0, 128, 128, 128, 128, 0
        DC8 0, 0, 31, 34, 34, 34, 34, 19, 0, 0, 128, 128, 240, 136, 136, 136
        DC8 24, 0, 32, 32, 63, 32, 32, 0, 0, 0, 0, 128, 128, 128, 128, 128, 0
        DC8 0, 107, 148, 148, 148, 147, 96, 0, 8, 248, 0, 128, 128, 128, 0, 0
        DC8 32, 63, 33, 0, 0, 32, 63, 32, 0, 128, 152, 152, 0, 0, 0, 0, 0, 32
        DC8 32, 63, 32, 32, 0, 0, 0, 0, 0, 128, 152, 152, 0, 0, 0, 192, 128
        DC8 128, 128, 127, 0, 0, 8, 248, 0, 0, 128, 128, 128, 0, 32, 63, 36, 2
        DC8 45, 48, 32, 0, 0, 8, 8, 248, 0, 0, 0, 0, 0, 32, 32, 63, 32, 32, 0
        DC8 0, 128, 128, 128, 128, 128, 128, 128, 0, 32, 63, 32, 0, 63, 32, 0
        DC8 63, 128, 128, 0, 128, 128, 128, 0, 0, 32, 63, 33, 0, 0, 32, 63, 32
        DC8 0, 0, 128, 128, 128, 128, 0, 0, 0, 31, 32, 32, 32, 32, 31, 0, 128
        DC8 128, 0, 128, 128, 0, 0, 0, 128, 255, 161, 32, 32, 17, 14, 0, 0, 0
        DC8 0, 128, 128, 128, 128, 0, 0, 14, 17, 32, 32, 160, 255, 128, 128
        DC8 128, 128, 0, 128, 128, 128, 0, 32, 32, 63, 33, 32, 0, 1, 0, 0, 0
        DC8 128, 128, 128, 128, 128, 0, 0, 51, 36, 36, 36, 36, 25, 0, 0, 128
        DC8 128, 224, 128, 128, 0, 0, 0, 0, 0, 31, 32, 32, 0, 0, 128, 128, 0, 0
        DC8 0, 128, 128, 0, 0, 31, 32, 32, 32, 16, 63, 32, 128, 128, 128, 0, 0
        DC8 128, 128, 128, 0, 1, 14, 48, 8, 6, 1, 0, 128, 128, 0, 128, 0, 128
        DC8 128, 128, 15, 48, 12, 3, 12, 48, 15, 0, 0, 128, 128, 0, 128, 128
        DC8 128, 0, 0, 32, 49, 46, 14, 49, 32, 0, 128, 128, 128, 0, 0, 128, 128
        DC8 128, 128, 129, 142, 112, 24, 6, 1, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 0, 0, 33, 48, 44, 34, 33, 48, 0, 0, 0, 0, 0, 128, 124, 2, 2, 0
        DC8 0, 0, 0, 0, 63, 64, 64, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255
        DC8 0, 0, 0, 0, 2, 2, 124, 128, 0, 0, 0, 0, 64, 64, 63, 0, 0, 0, 0, 0
        DC8 6, 1, 1, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0
//  160 {
//  161   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0
//  162   0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//!1
//  163   0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//"2
//  164   0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//#3
//  165   0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$4
//  166   0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//%5
//  167   0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//&6
//  168   0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//'7
//  169   0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//(8
//  170   0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//)9
//  171   0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//*10
//  172   0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+11
//  173   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//,12
//  174   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//-13
//  175   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//.14
//  176   0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,///15
//  177   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//016
//  178   0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//117
//  179   0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//218
//  180   0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//319
//  181   0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//420
//  182   0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//521
//  183   0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//622
//  184   0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//723
//  185   0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//824
//  186   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//925
//  187   0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//:26
//  188   0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//;27
//  189   0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//<28
//  190   0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//=29
//  191   0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//>30
//  192   0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//?31
//  193   0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@32
//  194   0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A33
//  195   0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B34
//  196   0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C35
//  197   0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D36
//  198   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E37
//  199   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F38
//  200   0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G39
//  201   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H40
//  202   0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I41
//  203   0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J42
//  204   0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K43
//  205   0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L44
//  206   0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M45
//  207   0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N46
//  208   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O47
//  209   0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P48
//  210   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q49
//  211   0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R50
//  212   0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S51
//  213   0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T52
//  214   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U53
//  215   0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V54
//  216   0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W55
//  217   0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X56
//  218   0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y57
//  219   0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z58
//  220   0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[59
//  221   0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\60
//  222   0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//]61
//  223   0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^62
//  224   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_63
//  225   0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//`64
//  226   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a65
//  227   0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b66
//  228   0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c67
//  229   0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d68
//  230   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e69
//  231   0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f70
//  232   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g71
//  233   0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h72
//  234   0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i73
//  235   0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j74
//  236   0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k75
//  237   0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l76
//  238   0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m77
//  239   0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n78
//  240   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o79
//  241   0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p80
//  242   0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q81
//  243   0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r82
//  244   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s83
//  245   0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t84
//  246   0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//uint85
//  247   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v86
//  248   0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w87
//  249   0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x88
//  250   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y89
//  251   0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z90
//  252   0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{91
//  253   0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//|92
//  254   0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//}93
//  255   0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~94
//  256 
//  257 };
//  258 //数据水平，字节垂直
//  259 

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  260 const uint8 LIBLOGO60x58[480] = {
LIBLOGO60x58:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192
        DC8 224, 248, 252, 254, 127, 63, 15, 15, 7, 7, 7, 135, 199, 199, 199
        DC8 231, 239, 255, 255, 255, 239, 231, 231, 231, 231, 231, 239, 255
        DC8 255, 255, 239, 231, 231, 231, 231, 231, 247, 7, 15, 63, 127, 255
        DC8 254, 252, 240, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 220, 223
        DC8 223, 223, 223, 215, 1, 0, 0, 0, 0, 0, 0, 62, 127, 255, 255, 227
        DC8 225, 225, 255, 255, 255, 224, 224, 224, 224, 224, 224, 224, 255
        DC8 255, 255, 224, 224, 224, 224, 193, 131, 7, 0, 0, 0, 0, 1, 215, 223
        DC8 223, 223, 223, 220, 216, 0, 0, 0, 0, 0, 0, 0, 1, 3, 15, 31, 63, 255
        DC8 255, 254, 248, 240, 224, 192, 128, 0, 0, 248, 240, 224, 192, 192
        DC8 192, 255, 255, 255, 192, 192, 192, 192, 192, 192, 192, 255, 255
        DC8 255, 192, 224, 225, 243, 255, 127, 63, 0, 192, 224, 248, 254, 255
        DC8 255, 255, 63, 31, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
        DC8 7, 15, 63, 127, 255, 254, 252, 249, 243, 193, 129, 1, 1, 255, 255
        DC8 255, 1, 1, 1, 1, 1, 1, 1, 255, 255, 255, 3, 1, 129, 192, 240, 252
        DC8 254, 255, 255, 127, 63, 15, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 15, 63, 127, 255
        DC8 255, 255, 251, 243, 227, 195, 3, 3, 3, 3, 3, 131, 195, 243, 243
        DC8 251, 255, 255, 255, 127, 63, 15, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 3, 7, 7, 31, 63, 127, 255, 254, 252, 252, 254, 255, 255
        DC8 127, 63, 15, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 15, 15, 7, 1, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
//  261   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  262   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  263   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  264   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  265   0X00,0X00,0XC0,0XE0,0XF8,0XFC,0XFE,0X7F,0X3F,0X0F,0X0F,0X07,0X07,0X07,0X87,0XC7,
//  266   0XC7,0XC7,0XE7,0XEF,0XFF,0XFF,0XFF,0XEF,0XE7,0XE7,0XE7,0XE7,0XE7,0XEF,0XFF,0XFF,
//  267   0XFF,0XEF,0XE7,0XE7,0XE7,0XE7,0XE7,0XF7,0X07,0X0F,0X3F,0X7F,0XFF,0XFE,0XFC,0XF0,
//  268   0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XD8,0XDC,0XDF,0XDF,0XDF,
//  269   0XDF,0XD7,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X3E,0X7F,0XFF,0XFF,0XE3,0XE1,0XE1,
//  270   0XFF,0XFF,0XFF,0XE0,0XE0,0XE0,0XE0,0XE0,0XE0,0XE0,0XFF,0XFF,0XFF,0XE0,0XE0,0XE0,
//  271   0XE0,0XC1,0X83,0X07,0X00,0X00,0X00,0X00,0X01,0XD7,0XDF,0XDF,0XDF,0XDF,0XDC,0XD8,
//  272   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X03,0X0F,0X1F,0X3F,0XFF,0XFF,0XFE,0XF8,
//  273   0XF0,0XE0,0XC0,0X80,0X00,0X00,0XF8,0XF0,0XE0,0XC0,0XC0,0XC0,0XFF,0XFF,0XFF,0XC0,
//  274   0XC0,0XC0,0XC0,0XC0,0XC0,0XC0,0XFF,0XFF,0XFF,0XC0,0XE0,0XE1,0XF3,0XFF,0X7F,0X3F,
//  275   0X00,0XC0,0XE0,0XF8,0XFE,0XFF,0XFF,0XFF,0X3F,0X1F,0X07,0X01,0X00,0X00,0X00,0X00,
//  276   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X07,0X0F,0X3F,0X7F,0XFF,
//  277   0XFE,0XFC,0XF9,0XF3,0XC1,0X81,0X01,0X01,0XFF,0XFF,0XFF,0X01,0X01,0X01,0X01,0X01,
//  278   0X01,0X01,0XFF,0XFF,0XFF,0X03,0X01,0X81,0XC0,0XF0,0XFC,0XFE,0XFF,0XFF,0X7F,0X3F,
//  279   0X0F,0X07,0X03,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  280   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X03,0X07,0X0F,0X3F,
//  281   0X7F,0XFF,0XFF,0XFF,0XFB,0XF3,0XE3,0XC3,0X03,0X03,0X03,0X03,0X03,0X83,0XC3,0XF3,
//  282   0XF3,0XFB,0XFF,0XFF,0XFF,0X7F,0X3F,0X0F,0X03,0X01,0X00,0X00,0X00,0X00,0X00,0X00,
//  283   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  284   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X03,0X07,
//  285   0X07,0X1F,0X3F,0X7F,0XFF,0XFE,0XFC,0XFC,0XFE,0XFF,0XFF,0X7F,0X3F,0X0F,0X07,0X03,
//  286   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  287   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  288   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  289   0X00,0X03,0X07,0X0F,0X0F,0X07,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  290   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  291 };
//  292 
//  293 

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  294 void OLED_WrDat(uint8 data)
//  295 {
OLED_WrDat:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
//  296 	uint8 i=8;
        MOVS     R5,#+8
//  297 	//LCD_CS=0;;
//  298 	OLED_DC(1);
        MOVS     R2,#+1
        MOVS     R1,#+14
        LDR.W    R0,??DataTable8  ;; 0x400ff0c0
        BL       LPLD_GPIO_Output_b
//  299   OLED_SCL(0);
        MOVS     R2,#+0
        MOVS     R1,#+13
        LDR.W    R0,??DataTable8  ;; 0x400ff0c0
        BL       LPLD_GPIO_Output_b
        B.N      ??OLED_WrDat_0
//  300   //asm("nop");
//  301   while(i--)
//  302   {
//  303     if(data&0x80){OLED_SDA(1);}
//  304     else{OLED_SDA(0);}
??OLED_WrDat_1:
        MOVS     R2,#+0
        MOVS     R1,#+12
        LDR.W    R0,??DataTable8  ;; 0x400ff0c0
        BL       LPLD_GPIO_Output_b
//  305     OLED_SCL(1);
??OLED_WrDat_2:
        MOVS     R2,#+1
        MOVS     R1,#+13
        LDR.W    R0,??DataTable8  ;; 0x400ff0c0
        BL       LPLD_GPIO_Output_b
//  306     asm("nop");;
        nop
//  307 		//asm("nop");
//  308     OLED_SCL(0);;
        MOVS     R2,#+0
        MOVS     R1,#+13
        LDR.W    R0,??DataTable8  ;; 0x400ff0c0
        BL       LPLD_GPIO_Output_b
//  309     data<<=1;
        LSLS     R4,R4,#+1
??OLED_WrDat_0:
        MOVS     R0,R5
        SUBS     R5,R0,#+1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??OLED_WrDat_3
        LSLS     R0,R4,#+24
        BPL.N    ??OLED_WrDat_1
        MOVS     R2,#+1
        MOVS     R1,#+12
        LDR.W    R0,??DataTable8  ;; 0x400ff0c0
        BL       LPLD_GPIO_Output_b
        B.N      ??OLED_WrDat_2
//  310   }
//  311 }
??OLED_WrDat_3:
        POP      {R0,R4,R5,PC}    ;; return
//  312 

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  313 void OLED_WrCmd(uint8 cmd)
//  314 {
OLED_WrCmd:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
//  315 	uint8 i=8;
        MOVS     R5,#+8
//  316 
//  317 	//LCD_CS=0;;
//  318 	OLED_DC(0);;
        MOVS     R2,#+0
        MOVS     R1,#+14
        LDR.W    R0,??DataTable8  ;; 0x400ff0c0
        BL       LPLD_GPIO_Output_b
//  319   OLED_SCL(0);;
        MOVS     R2,#+0
        MOVS     R1,#+13
        LDR.W    R0,??DataTable8  ;; 0x400ff0c0
        BL       LPLD_GPIO_Output_b
        B.N      ??OLED_WrCmd_0
//  320   //asm("nop");
//  321   while(i--)
//  322   {
//  323     if(cmd&0x80){OLED_SDA(1);}
//  324     else{OLED_SDA(0);;}
??OLED_WrCmd_1:
        MOVS     R2,#+0
        MOVS     R1,#+12
        LDR.W    R0,??DataTable8  ;; 0x400ff0c0
        BL       LPLD_GPIO_Output_b
//  325     OLED_SCL(1);;
??OLED_WrCmd_2:
        MOVS     R2,#+1
        MOVS     R1,#+13
        LDR.W    R0,??DataTable8  ;; 0x400ff0c0
        BL       LPLD_GPIO_Output_b
//  326     asm("nop");;
        nop
//  327     OLED_SCL(0);;
        MOVS     R2,#+0
        MOVS     R1,#+13
        LDR.W    R0,??DataTable8  ;; 0x400ff0c0
        BL       LPLD_GPIO_Output_b
//  328     cmd<<=1;;
        LSLS     R4,R4,#+1
??OLED_WrCmd_0:
        MOVS     R0,R5
        SUBS     R5,R0,#+1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??OLED_WrCmd_3
        LSLS     R0,R4,#+24
        BPL.N    ??OLED_WrCmd_1
        MOVS     R2,#+1
        MOVS     R1,#+12
        LDR.W    R0,??DataTable8  ;; 0x400ff0c0
        BL       LPLD_GPIO_Output_b
        B.N      ??OLED_WrCmd_2
//  329   }
//  330 }
??OLED_WrCmd_3:
        POP      {R0,R4,R5,PC}    ;; return
//  331 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  332 void OLED_Set_Pos(uint8 x, uint8 y)
//  333 {
OLED_Set_Pos:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  334   OLED_WrCmd(0xb0+y);
        SUBS     R0,R1,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  335   OLED_WrCmd(((x&0xf0)>>4)|0x10);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LSRS     R0,R4,#+4
        ORRS     R0,R0,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  336   OLED_WrCmd((x&0x0f)|0x01);
        ANDS     R0,R4,#0xF
        ORRS     R0,R0,#0x1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  337 }
        POP      {R4,PC}          ;; return
//  338 
//  339 //清屏

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  340 void OLED_Fill(uint8 bmp_data)
//  341 {
OLED_Fill:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
//  342 	uint8 y,x;
//  343 
//  344 	for(y=0;y<8;y++)
        MOVS     R5,#+0
        B.N      ??OLED_Fill_0
//  345 	{
//  346 		OLED_WrCmd(0xb0+y);
//  347 		OLED_WrCmd(0x01);
//  348 		OLED_WrCmd(0x10);
//  349 		for(x=0;x<X_WIDTH;x++)
//  350 			OLED_WrDat(bmp_data);
??OLED_Fill_1:
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrDat
        ADDS     R6,R6,#+1
??OLED_Fill_2:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+128
        BLT.N    ??OLED_Fill_1
        ADDS     R5,R5,#+1
??OLED_Fill_0:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+8
        BGE.N    ??OLED_Fill_3
        SUBS     R0,R5,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
        MOVS     R0,#+1
        BL       OLED_WrCmd
        MOVS     R0,#+16
        BL       OLED_WrCmd
        MOVS     R6,#+0
        B.N      ??OLED_Fill_2
//  351 	}
//  352 }
??OLED_Fill_3:
        POP      {R4-R6,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  353 void OLED_CLS(void)
//  354 {
OLED_CLS:
        PUSH     {R3-R5,LR}
//  355 	uint8 y,x;
//  356 	for(y=0;y<8;y++)
        MOVS     R4,#+0
        B.N      ??OLED_CLS_0
//  357 	{
//  358 		OLED_WrCmd(0xb0+y);
//  359 		OLED_WrCmd(0x01);
//  360 		OLED_WrCmd(0x10);
//  361 		for(x=0;x<X_WIDTH;x++)
//  362 			OLED_WrDat(0);
??OLED_CLS_1:
        MOVS     R0,#+0
        BL       OLED_WrDat
        ADDS     R5,R5,#+1
??OLED_CLS_2:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+128
        BLT.N    ??OLED_CLS_1
        ADDS     R4,R4,#+1
??OLED_CLS_0:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+8
        BGE.N    ??OLED_CLS_3
        SUBS     R0,R4,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
        MOVS     R0,#+1
        BL       OLED_WrCmd
        MOVS     R0,#+16
        BL       OLED_WrCmd
        MOVS     R5,#+0
        B.N      ??OLED_CLS_2
//  363 	}
//  364 }
??OLED_CLS_3:
        POP      {R0,R4,R5,PC}    ;; return
//  365 
//  366 
//  367 //==============================================================
//  368 //函数名： void LCD_PutPixel(uint8 x,uint8 y)
//  369 //功能描述：绘制一个点（x,y）
//  370 //参数：真实坐标值(x,y),x的范围0～127，y的范围0～64
//  371 //返回：无
//  372 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  373 void OLED_PutPixel(uint8 x,uint8 y)
//  374 {
OLED_PutPixel:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  375 	uint8 data1;  //data1当前点的数据
//  376 
//  377         OLED_Set_Pos(x,y);
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  378 	data1 = 0x01<<(y%8);
        MOVS     R0,#+1
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R5,R1
        MLS      R2,R2,R1,R5
        LSLS     R6,R0,R2
//  379 	OLED_WrCmd(0xb0+(y>>3));
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        LSRS     R0,R5,#+3
        SUBS     R0,R0,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  380 	OLED_WrCmd(((x&0xf0)>>4)|0x10);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LSRS     R0,R4,#+4
        ORRS     R0,R0,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  381 	OLED_WrCmd((x&0x0f)|0x00);
        ANDS     R0,R4,#0xF
        BL       OLED_WrCmd
//  382 	OLED_WrDat(data1);
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrDat
//  383 }
        POP      {R4-R6,PC}       ;; return
//  384 
//  385 //==============================================================
//  386 //函数名： void LCD_Rectangle(uint8 x1,uint8 y1,
//  387 //                   uint8 x2,uint8 y2,uint8 color,uint8 gif)
//  388 //功能描述：绘制一个实心矩形
//  389 //参数：左上角坐标（x1,y1）,右下角坐标（x2，y2）
//  390    //      其中x1、x2的范围0～127，y1，y2的范围0～63，即真实坐标值
//  391 //返回：无
//  392 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  393 void OLED_Rectangle(uint8 x1,uint8 y1,uint8 x2,uint8 y2,uint8 gif)
//  394 {
OLED_Rectangle:
        PUSH     {R3-R9,LR}
        MOVS     R5,R0
        MOVS     R6,R1
        MOVS     R7,R2
        MOV      R8,R3
//  395 	uint8 n;
//  396 
//  397 	OLED_Set_Pos(x1,y1>>3);
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LSRS     R1,R6,#+3
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  398 	for(n=x1;n<=x2;n++)
        MOV      R9,R5
        LDR      R4,[SP, #+32]
        B.N      ??OLED_Rectangle_0
//  399 	{
//  400 		OLED_WrDat(0x01<<(y1%8));
??OLED_Rectangle_1:
        MOVS     R0,#+1
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R6,R1
        MLS      R2,R2,R1,R6
        LSLS     R0,R0,R2
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrDat
//  401 		if(gif == 1) 	LPLD_LPTMR_DelayMs(50);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+1
        BNE.N    ??OLED_Rectangle_2
        MOVS     R0,#+50
        BL       LPLD_LPTMR_DelayMs
//  402 	}
??OLED_Rectangle_2:
        ADDS     R9,R9,#+1
??OLED_Rectangle_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R7,R9
        BCS.N    ??OLED_Rectangle_1
//  403 	OLED_Set_Pos(x1,y2>>3);
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LSRS     R1,R8,#+3
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  404   for(n=x1;n<=x2;n++)
        MOV      R9,R5
        B.N      ??OLED_Rectangle_3
//  405 	{
//  406 		OLED_WrDat(0x01<<(y2%8));
??OLED_Rectangle_4:
        MOVS     R0,#+1
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R8,R1
        MLS      R2,R2,R1,R8
        LSLS     R0,R0,R2
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrDat
//  407 		if(gif == 1) 	LPLD_LPTMR_DelayMs(5);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+1
        BNE.N    ??OLED_Rectangle_5
        MOVS     R0,#+5
        BL       LPLD_LPTMR_DelayMs
//  408 	}
??OLED_Rectangle_5:
        ADDS     R9,R9,#+1
??OLED_Rectangle_3:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R7,R9
        BCS.N    ??OLED_Rectangle_4
//  409 }
        POP      {R0,R4-R9,PC}    ;; return
//  410 
//  411 //==============================================================
//  412 //函数名：LCD_P6x8Str(uint8 x,uint8 y,uint8 *p)
//  413 //功能描述：写入一组标准ASCII字符串
//  414 //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
//  415 //返回：无
//  416 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  417 void OLED_P6x8Str(uint8 x,uint8 y,uint8 ch[])
//  418 {
OLED_P6x8Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  419   uint8 c=0,i=0,j=0;
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
        B.N      ??OLED_P6x8Str_0
//  420   while (ch[j]!='\0')
//  421   {
//  422     c =ch[j]-32;
//  423     if(x>126){x=0;y++;}
//  424     OLED_Set_Pos(x,y);
//  425   	for(i=0;i<6;i++)
//  426   	  OLED_WrDat(F6x8[c][i]);
??OLED_P6x8Str_1:
        LDR.W    R0,??DataTable8_4
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R1,#+6
        MLA      R0,R1,R7,R0
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LDRB     R0,[R8, R0]
        BL       OLED_WrDat
        ADDS     R8,R8,#+1
??OLED_P6x8Str_2:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+6
        BLT.N    ??OLED_P6x8Str_1
//  427   	x+=6;
        ADDS     R4,R4,#+6
//  428   	j++;
        ADDS     R9,R9,#+1
??OLED_P6x8Str_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??OLED_P6x8Str_3
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R7,R0,#+32
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+127
        BLT.N    ??OLED_P6x8Str_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??OLED_P6x8Str_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOVS     R8,#+0
        B.N      ??OLED_P6x8Str_2
//  429   }
//  430 }
??OLED_P6x8Str_3:
        POP      {R0,R4-R9,PC}    ;; return
//  431 
//  432 //==============================================================
//  433 //功能描述：显示6X8的字符                      
//  434 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  435 void OLED_6x8Char(uint8 X1, uint8 Y1, uint8 Data1)
//  436 {
OLED_6x8Char:
        PUSH     {R3-R5,LR}
//  437     uint8 xx, temp;     
//  438        
//  439     temp = Data1-32;
        SUBS     R5,R2,#+32
//  440     if(X1 > 122)
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+123
        BLT.N    ??OLED_6x8Char_0
//  441     {
//  442         X1 = 0;
        MOVS     R0,#+0
//  443         Y1++;
        ADDS     R1,R1,#+1
//  444     } 
//  445     OLED_Set_Pos(X1, Y1);
??OLED_6x8Char_0:
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  446     
//  447     for(xx = 0; xx < 6; xx++)
        MOVS     R4,#+0
        B.N      ??OLED_6x8Char_1
//  448     {     
//  449         OLED_WrDat(F6x8[temp][xx]);  
??OLED_6x8Char_2:
        LDR.W    R0,??DataTable8_4
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        MOVS     R1,#+6
        MLA      R0,R1,R5,R0
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LDRB     R0,[R4, R0]
        BL       OLED_WrDat
//  450     }
        ADDS     R4,R4,#+1
??OLED_6x8Char_1:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+6
        BLT.N    ??OLED_6x8Char_2
//  451 }
        POP      {R0,R4,R5,PC}    ;; return
//  452 
//  453 
//  454 //==============================================================
//  455 //函数名：LCD_P8x16Str(uint8 x,uint8 y,uint8 *p)
//  456 //功能描述：写入一组标准ASCII字符串
//  457 //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
//  458 //返回：无
//  459 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  460 void OLED_P8x16Str(uint8 x,uint8 y,uint8 ch[])
//  461 {
OLED_P8x16Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  462   uint8 c=0,i=0,j=0;
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
        B.N      ??OLED_P8x16Str_0
//  463 
//  464   while (ch[j]!='\0')
//  465   {
//  466     c =ch[j]-32;
//  467     if(x>120){x=0;y++;}
//  468     OLED_Set_Pos(x,y);
//  469   	for(i=0;i<8;i++)
//  470   	  OLED_WrDat(F8X16[c*16+i]);
//  471   	OLED_Set_Pos(x,y+1);
//  472   	for(i=0;i<8;i++)
//  473   	  OLED_WrDat(F8X16[c*16+i+8]);
??OLED_P8x16Str_1:
        LDR.W    R0,??DataTable8_5
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LSLS     R1,R7,#+4
        UXTAB    R1,R1,R8
        ADDS     R0,R1,R0
        LDRB     R0,[R0, #+8]
        BL       OLED_WrDat
        ADDS     R8,R8,#+1
??OLED_P8x16Str_2:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BLT.N    ??OLED_P8x16Str_1
//  474   	x+=8;
        ADDS     R4,R4,#+8
//  475   	j++;
        ADDS     R9,R9,#+1
??OLED_P8x16Str_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??OLED_P8x16Str_3
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R7,R0,#+32
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+121
        BLT.N    ??OLED_P8x16Str_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??OLED_P8x16Str_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOVS     R8,#+0
        B.N      ??OLED_P8x16Str_5
??OLED_P8x16Str_6:
        LDR.W    R0,??DataTable8_5
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LSLS     R1,R7,#+4
        UXTAB    R1,R1,R8
        LDRB     R0,[R1, R0]
        BL       OLED_WrDat
        ADDS     R8,R8,#+1
??OLED_P8x16Str_5:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BLT.N    ??OLED_P8x16Str_6
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOVS     R8,#+0
        B.N      ??OLED_P8x16Str_2
//  476   }
//  477 }
??OLED_P8x16Str_3:
        POP      {R0,R4-R9,PC}    ;; return
//  478 
//  479 
//  480 //输出汉字和字符混合字符串

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  481 void OLED_Print(uint8 x, uint8 y, uint8 ch[])
//  482 {
OLED_Print:
        PUSH     {R3-R7,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  483 	uint8 ch2[3];
//  484 	uint8 ii=0;
        MOVS     R7,#+0
        B.N      ??OLED_Print_0
//  485 	while(ch[ii] != '\0')
//  486 	{
//  487 		if(ch[ii] > 127)
//  488 		{
//  489 			ch2[0] = ch[ii];
??OLED_Print_1:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        STRB     R0,[SP, #+0]
//  490 	 		ch2[1] = ch[ii + 1];
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADDS     R0,R7,R6
        LDRB     R0,[R0, #+1]
        STRB     R0,[SP, #+1]
//  491 			ch2[2] = '\0';			//汉字为两个字节
        MOVS     R0,#+0
        STRB     R0,[SP, #+2]
//  492 			OLED_P14x16Str(x , y, ch2);	//显示汉字
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P14x16Str
//  493 			x += 14;
        ADDS     R4,R4,#+14
//  494 			ii += 2;
        ADDS     R7,R7,#+2
//  495 		}
??OLED_Print_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+0
        BEQ.N    ??OLED_Print_2
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+128
        BGE.N    ??OLED_Print_1
//  496 		else
//  497 		{
//  498 			ch2[0] = ch[ii];
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        STRB     R0,[SP, #+0]
//  499 			ch2[1] = '\0';			//字母占一个字节
        MOVS     R0,#+0
        STRB     R0,[SP, #+1]
//  500 			OLED_P8x16Str(x , y , ch2);	//显示字母
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
//  501 			x += 8;
        ADDS     R4,R4,#+8
//  502 			ii+= 1;
        ADDS     R7,R7,#+1
        B.N      ??OLED_Print_0
//  503 		}
//  504 	}
//  505 }
??OLED_Print_2:
        POP      {R0,R4-R7,PC}    ;; return
//  506 
//  507 //==============================================================
//  508 //函数名： void Draw_BMP(uint8 x,uint8 y)
//  509 //功能描述：显示BMP图片128×64
//  510 //参数：起始点坐标(x,y),x的范围0～127，y为页的范围0～7
//  511 //返回：无
//  512 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  513 void Draw_BMP(uint8 x0,uint8 y0,uint8 x1,uint8 y1,uint8 bmp[])
//  514 {
Draw_BMP:
        PUSH     {R4-R10,LR}
        MOVS     R4,R0
        MOVS     R5,R2
        MOVS     R6,R3
//  515   uint16 ii=0;
        MOVS     R7,#+0
//  516   uint8 x,y;
//  517 
//  518   if(y1%8==0) y=y1/8;
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+8
        SDIV     R2,R6,R0
        MLS      R2,R2,R0,R6
        CMP      R2,#+0
        BNE.N    ??Draw_BMP_0
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+8
        SDIV     R10,R6,R0
        B.N      ??Draw_BMP_1
//  519   else y=y1/8+1;
??Draw_BMP_0:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+8
        SDIV     R0,R6,R0
        ADDS     R10,R0,#+1
//  520 	for(y=y0;y<=y1;y++)
??Draw_BMP_1:
        MOV      R10,R1
        LDR      R8,[SP, #+32]
        B.N      ??Draw_BMP_2
//  521 	{
//  522 		OLED_Set_Pos(x0,y);
//  523     for(x=x0;x<x1;x++)
//  524 	    {
//  525 	    	OLED_WrDat(bmp[ii++]);
??Draw_BMP_3:
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        LDRB     R0,[R7, R8]
        BL       OLED_WrDat
        ADDS     R7,R7,#+1
//  526 	    }
        ADDS     R9,R9,#+1
??Draw_BMP_4:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R9,R5
        BCC.N    ??Draw_BMP_3
        ADDS     R10,R10,#+1
??Draw_BMP_2:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        CMP      R6,R10
        BCC.N    ??Draw_BMP_5
        MOV      R1,R10
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOV      R9,R4
        B.N      ??Draw_BMP_4
//  527 	}
//  528 }
??Draw_BMP_5:
        POP      {R4-R10,PC}      ;; return
//  529 
//  530 
//  531 
//  532 /*
//  533 函数功能：OLED显示一行CCD图像
//  534 形参：y0为起始行数(0～63)，y0为结束行数(0～63)，CCD_Data[]为CCD二值化后的数组
//  535 返回值：无
//  536 */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  537 void OLED_Print_RowPic(uint8 y0, uint8 CCD_Data[])
//  538  { 
OLED_Print_RowPic:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  539     uint8 i=0;
        MOVS     R6,#+0
//  540      for(i=0; i<128; i++) 
        MOVS     R0,#+0
        MOVS     R6,R0
        B.N      ??OLED_Print_RowPic_0
//  541        if(CCD_Data[i]==0)
??OLED_Print_RowPic_1:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LDRB     R0,[R6, R5]
        CMP      R0,#+0
        BNE.N    ??OLED_Print_RowPic_2
//  542         OLED_PutPixel(i,y0); 
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_PutPixel
??OLED_Print_RowPic_2:
        ADDS     R6,R6,#+1
??OLED_Print_RowPic_0:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+128
        BLT.N    ??OLED_Print_RowPic_1
//  543  }
        POP      {R4-R6,PC}       ;; return
//  544 
//  545 
//  546 /*
//  547 函数功能：OLED显示四位int数据，可显示正负
//  548 形参：
//  549 返回值：无
//  550 */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  551 void OLED_Print_Int(uint8 x0, uint8 y0, int Data)
//  552 {
OLED_Print_Int:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  553   uint8 ge,shi,bai,qian;
//  554   if( Data<0 )
        CMP      R6,#+0
        BPL.N    ??OLED_Print_Int_0
//  555    {
//  556      OLED_P6x8Str(x0,y0,"-");
        ADR.N    R2,??DataTable5  ;; "-"
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P6x8Str
//  557      Data = -Data;
        RSBS     R6,R6,#+0
        B.N      ??OLED_Print_Int_1
//  558    }
//  559   else
//  560     OLED_P6x8Str(x0,y0,"+");
??OLED_Print_Int_0:
        ADR.N    R2,??DataTable5_1  ;; "+"
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P6x8Str
//  561   
//  562   ge = Data%10;
??OLED_Print_Int_1:
        MOVS     R0,#+10
        SDIV     R1,R6,R0
        MLS      R7,R0,R1,R6
//  563   shi = (Data%100)/10;
        MOVS     R0,#+100
        SDIV     R1,R6,R0
        MLS      R0,R0,R1,R6
        MOVS     R1,#+10
        SDIV     R8,R0,R1
//  564   bai = (Data%1000)/100;
        MOV      R0,#+1000
        SDIV     R1,R6,R0
        MLS      R0,R0,R1,R6
        MOVS     R1,#+100
        SDIV     R9,R0,R1
//  565   qian = (Data%10000)/1000;
        MOVW     R0,#+10000
        SDIV     R1,R6,R0
        MLS      R0,R0,R1,R6
        MOV      R1,#+1000
        SDIV     R0,R0,R1
//  566   
//  567   if(qian!=0)
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??OLED_Print_Int_2
//  568    {
//  569      OLED_6x8Char(x0+6,y0,qian+48); OLED_6x8Char(x0+12,y0,bai+48);
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
        ADDS     R2,R9,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+12
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
//  570      OLED_6x8Char(x0+18,y0,shi+48); OLED_6x8Char(x0+24,y0,ge+48);
        ADDS     R2,R8,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+18
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
        ADDS     R2,R7,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
        B.N      ??OLED_Print_Int_3
//  571    }
//  572   else if(bai!=0)
??OLED_Print_Int_2:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+0
        BEQ.N    ??OLED_Print_Int_4
//  573    {
//  574      OLED_6x8Char(x0+6,y0,bai+48);  OLED_6x8Char(x0+12,y0,shi+48);
        ADDS     R2,R9,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
        ADDS     R2,R8,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+12
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
//  575      OLED_6x8Char(x0+18,y0,ge+48);
        ADDS     R2,R7,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+18
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
        B.N      ??OLED_Print_Int_3
//  576    }
//  577   else if(shi!=0)
??OLED_Print_Int_4:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+0
        BEQ.N    ??OLED_Print_Int_5
//  578    {
//  579      OLED_6x8Char(x0+6,y0,shi+48); OLED_6x8Char(x0+12,y0,ge+48);
        ADDS     R2,R8,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
        ADDS     R2,R7,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+12
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
        B.N      ??OLED_Print_Int_3
//  580    }
//  581   else if(ge!=0)
??OLED_Print_Int_5:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+0
        BEQ.N    ??OLED_Print_Int_6
//  582      OLED_6x8Char(x0+6,y0,ge+48);
        ADDS     R2,R7,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
        B.N      ??OLED_Print_Int_3
//  583   else
//  584      OLED_6x8Char(x0+6,y0,48);
??OLED_Print_Int_6:
        MOVS     R2,#+48
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
//  585 }
??OLED_Print_Int_3:
        POP      {R0,R4-R9,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable5:
        DC8      "-",0x0,0x0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable5_1:
        DC8      "+",0x0,0x0
//  586 
//  587 
//  588 /*
//  589 函数功能：OLED显示四位int数据，可显示正负,以及一位浮点
//  590 形参：
//  591 返回值：无
//  592 */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  593 void OLED_Print_Float(uint8 x0, uint8 y0, float Data)
//  594 {
OLED_Print_Float:
        PUSH     {R3-R11,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOV      R11,R2
//  595   uint8 ge,shi,bai,qian,decimus,hundth;
//  596   if( Data<0 )
        MOV      R0,R11
        MOVS     R1,#+0
        BL       __aeabi_cfcmple
        BCS.N    ??OLED_Print_Float_0
//  597    {
//  598      OLED_P6x8Str(x0,y0,"-");
        ADR.N    R2,??DataTable6  ;; "-"
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P6x8Str
//  599      Data = -Data;
        EORS     R11,R11,#0x80000000
        B.N      ??OLED_Print_Float_1
//  600    }
//  601   else
//  602     OLED_P6x8Str(x0,y0,"+");
??OLED_Print_Float_0:
        ADR.N    R2,??DataTable6_1  ;; "+"
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P6x8Str
//  603   
//  604   ge = ( (uint8) (Data) )%10;
??OLED_Print_Float_1:
        MOV      R0,R11
        BL       __aeabi_f2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R6,R1,R2,R0
//  605   shi =( (uint8) (Data) ) %100/10;
        MOV      R0,R11
        BL       __aeabi_f2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        MOVS     R1,#+100
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        MOVS     R1,#+10
        SDIV     R7,R0,R1
//  606   bai =( (uint8) (Data) ) %1000/100;
        MOV      R0,R11
        BL       __aeabi_f2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        MOV      R1,#+1000
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        MOVS     R1,#+100
        SDIV     R8,R0,R1
//  607   qian = ( (uint8) (Data) ) %10000/1000;
        MOV      R0,R11
        BL       __aeabi_f2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        MOVW     R1,#+10000
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        MOV      R1,#+1000
        SDIV     R9,R0,R1
//  608   decimus = ( (uint8) (Data*10) )%10;
        LDR.W    R0,??DataTable8_6  ;; 0x41200000
        MOV      R1,R11
        BL       __aeabi_fmul
        BL       __aeabi_f2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R10,R1,R2,R0
//  609   hundth = (uint8) (Data*100)%10;
        LDR.W    R0,??DataTable8_7  ;; 0x42c80000
        MOV      R1,R11
        BL       __aeabi_fmul
        BL       __aeabi_f2iz
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R11,R1,R2,R0
//  610   if(qian!=0)
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+0
        BEQ.N    ??OLED_Print_Float_2
//  611    {
//  612      OLED_6x8Char(x0+6,y0,qian+48); OLED_6x8Char(x0+12,y0,bai+48);
        ADDS     R2,R9,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
        ADDS     R2,R8,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+12
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
//  613      OLED_6x8Char(x0+18,y0,shi+48); OLED_6x8Char(x0+24,y0,ge+48);
        ADDS     R2,R7,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+18
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
        ADDS     R2,R6,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
//  614      OLED_P6x8Str(x0+30,y0,".");    OLED_6x8Char(x0+36,y0,decimus+48);
        ADR.N    R2,??DataTable6_2  ;; "."
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+30
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P6x8Str
        ADDS     R2,R10,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+36
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
//  615      OLED_6x8Char(x0+42,y0,hundth+48);
        ADDS     R2,R11,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+42
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
        B.N      ??OLED_Print_Float_3
//  616    }
//  617   else if(bai!=0)
??OLED_Print_Float_2:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+0
        BEQ.N    ??OLED_Print_Float_4
//  618    {
//  619      OLED_6x8Char(x0+6,y0,bai+48);  OLED_6x8Char(x0+12,y0,shi+48);
        ADDS     R2,R8,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
        ADDS     R2,R7,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+12
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
//  620      OLED_6x8Char(x0+18,y0,ge+48);   
        ADDS     R2,R6,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+18
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
//  621      OLED_P6x8Str(x0+24,y0,".");    OLED_6x8Char(x0+30,y0,decimus+48);
        ADR.N    R2,??DataTable6_2  ;; "."
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P6x8Str
        ADDS     R2,R10,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+30
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
//  622      OLED_6x8Char(x0+36,y0,hundth+48);
        ADDS     R2,R11,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+36
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
        B.N      ??OLED_Print_Float_3
//  623    }
//  624   else if(shi!=0)
??OLED_Print_Float_4:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+0
        BEQ.N    ??OLED_Print_Float_5
//  625    {
//  626      OLED_6x8Char(x0+6,y0,shi+48);  OLED_6x8Char(x0+12,y0,ge+48);
        ADDS     R2,R7,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
        ADDS     R2,R6,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+12
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
//  627      OLED_P6x8Str(x0+18,y0,".");    OLED_6x8Char(x0+24,y0,decimus+48);
        ADR.N    R2,??DataTable6_2  ;; "."
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+18
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P6x8Str
        ADDS     R2,R10,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
//  628      OLED_6x8Char(x0+30,y0,hundth+48);
        ADDS     R2,R11,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+30
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
        B.N      ??OLED_Print_Float_3
//  629    }
//  630   else if(ge!=0)
??OLED_Print_Float_5:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+0
        BEQ.N    ??OLED_Print_Float_6
//  631    {
//  632      OLED_6x8Char(x0+6,y0,ge+48);   OLED_P6x8Str(x0+12,y0,".");   
        ADDS     R2,R6,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
        ADR.N    R2,??DataTable6_2  ;; "."
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+12
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P6x8Str
//  633      OLED_6x8Char(x0+18,y0,decimus+48); OLED_6x8Char(x0+24,y0,hundth+48);
        ADDS     R2,R10,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+18
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
        ADDS     R2,R11,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
        B.N      ??OLED_Print_Float_3
//  634    }
//  635   else if(decimus!=0)
??OLED_Print_Float_6:
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        CMP      R10,#+0
        BEQ.N    ??OLED_Print_Float_7
//  636    {
//  637      OLED_6x8Char(x0+6,y0,48);
        MOVS     R2,#+48
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
//  638      OLED_P6x8Str(x0+12,y0,".");    OLED_6x8Char(x0+18,y0,decimus+48);
        ADR.N    R2,??DataTable6_2  ;; "."
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+12
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P6x8Str
        ADDS     R2,R10,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+18
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
//  639      OLED_6x8Char(x0+24,y0,hundth+48);     
        ADDS     R2,R11,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
        B.N      ??OLED_Print_Float_3
//  640    }
//  641   else if(hundth!=0)
??OLED_Print_Float_7:
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        CMP      R11,#+0
        BEQ.N    ??OLED_Print_Float_8
//  642    {
//  643      OLED_6x8Char(x0+6,y0,48);
        MOVS     R2,#+48
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
//  644      OLED_P6x8Str(x0+12,y0,".");    OLED_6x8Char(x0+18,y0,decimus+48);
        ADR.N    R2,??DataTable6_2  ;; "."
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+12
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P6x8Str
        ADDS     R2,R10,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+18
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
//  645      OLED_6x8Char(x0+24,y0,hundth+48);     
        ADDS     R2,R11,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+24
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
        B.N      ??OLED_Print_Float_3
//  646    }
//  647   else  
//  648     OLED_6x8Char(x0+6,y0,48);
??OLED_Print_Float_8:
        MOVS     R2,#+48
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADDS     R0,R4,#+6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_6x8Char
//  649 }
??OLED_Print_Float_3:
        POP      {R0,R4-R11,PC}   ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable6:
        DC8      "-",0x0,0x0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable6_1:
        DC8      "+",0x0,0x0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable6_2:
        DC8      ".",0x0,0x0
//  650 
//  651 
//  652 extern int Flag_Island_Confirm;
//  653 extern uint8 final;
//  654 extern uint8 Flag_Island;
//  655 extern int Ahead_TurnError; 
//  656 extern uint8 Dir_IslandTurn;
//  657 extern uint8 SendCommand;
//  658 /*
//  659 函数功能：主循环OLED显示
//  660 返回值：无
//  661 */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  662  void OLED_while(uint8 Page_Slt)
//  663  {
OLED_while:
        PUSH     {R7,LR}
//  664       
//  665     //清屏
//  666     OLED_Fill(0x00);
        MOVS     R0,#+0
        BL       OLED_Fill
//  667     
//  668     //----不可调参界面显示------
//  669     if(ShowOrDebug == Show)
        LDR.W    R0,??DataTable8_8
        LDRB     R0,[R0, #+0]
        CMP      R0,#+0
        BNE.W    ??OLED_while_0
//  670     {
//  671         OLED_P6x8Str(6,0,"Show:"); 
        LDR.W    R2,??DataTable8_9
        MOVS     R1,#+0
        MOVS     R0,#+6
        BL       OLED_P6x8Str
//  672 
//  673         switch(Show_Page_Slt)
        LDR.W    R0,??DataTable8_10
        LDRSB    R0,[R0, #+0]
        CMP      R0,#+1
        BEQ.N    ??OLED_while_1
        BCC.W    ??OLED_while_2
        CMP      R0,#+3
        BEQ.W    ??OLED_while_3
        BCC.N    ??OLED_while_4
        CMP      R0,#+4
        BEQ.W    ??OLED_while_5
        B.N      ??OLED_while_2
//  674         {
//  675           
//  676           //------第一页显示---------
//  677            case 1:
//  678            {
//  679                OLED_P6x8Str(6,1,"Peak_Normal:"); 
??OLED_while_1:
        LDR.W    R2,??DataTable8_11
        MOVS     R1,#+1
        MOVS     R0,#+6
        BL       OLED_P6x8Str
//  680 
//  681                OLED_P6x8Str(15,3,"pk0=");     OLED_Print_Int(40,3,peak[0]); 
        LDR.W    R2,??DataTable8_12
        MOVS     R1,#+3
        MOVS     R0,#+15
        BL       OLED_P6x8Str
        LDR.W    R0,??DataTable8_13
        LDR      R2,[R0, #+0]
        MOVS     R1,#+3
        MOVS     R0,#+40
        BL       OLED_Print_Int
//  682                OLED_P6x8Str(70,3,"pk1=");     OLED_Print_Int(95,3,peak[1]); 
        LDR.W    R2,??DataTable8_14
        MOVS     R1,#+3
        MOVS     R0,#+70
        BL       OLED_P6x8Str
        LDR.W    R0,??DataTable8_13
        LDR      R2,[R0, #+4]
        MOVS     R1,#+3
        MOVS     R0,#+95
        BL       OLED_Print_Int
//  683                OLED_P6x8Str(15,4,"pk2=");     OLED_Print_Int(40,4,peak[2]); 
        LDR.W    R2,??DataTable8_15
        MOVS     R1,#+4
        MOVS     R0,#+15
        BL       OLED_P6x8Str
        LDR.N    R0,??DataTable8_13
        LDR      R2,[R0, #+8]
        MOVS     R1,#+4
        MOVS     R0,#+40
        BL       OLED_Print_Int
//  684                OLED_P6x8Str(70,4,"pk3=");     OLED_Print_Int(95,4,peak[3]); 
        LDR.N    R2,??DataTable8_16
        MOVS     R1,#+4
        MOVS     R0,#+70
        BL       OLED_P6x8Str
        LDR.N    R0,??DataTable8_13
        LDR      R2,[R0, #+12]
        MOVS     R1,#+4
        MOVS     R0,#+95
        BL       OLED_Print_Int
//  685                OLED_P6x8Str(15,5,"pk4=");     OLED_Print_Int(40,5,peak[4]); 
        LDR.N    R2,??DataTable8_17
        MOVS     R1,#+5
        MOVS     R0,#+15
        BL       OLED_P6x8Str
        LDR.N    R0,??DataTable8_13
        LDR      R2,[R0, #+16]
        MOVS     R1,#+5
        MOVS     R0,#+40
        BL       OLED_Print_Int
//  686                OLED_P6x8Str(70,5,"pk5=");     OLED_Print_Int(95,5,peak[5]); 
        LDR.N    R2,??DataTable8_18
        MOVS     R1,#+5
        MOVS     R0,#+70
        BL       OLED_P6x8Str
        LDR.N    R0,??DataTable8_13
        LDR      R2,[R0, #+20]
        MOVS     R1,#+5
        MOVS     R0,#+95
        BL       OLED_Print_Int
//  687                OLED_P6x8Str(15,6,"pk6=");     OLED_Print_Int(40,6,peak[6]); 
        LDR.N    R2,??DataTable8_19
        MOVS     R1,#+6
        MOVS     R0,#+15
        BL       OLED_P6x8Str
        LDR.N    R0,??DataTable8_13
        LDR      R2,[R0, #+24]
        MOVS     R1,#+6
        MOVS     R0,#+40
        BL       OLED_Print_Int
//  688                OLED_P6x8Str(70,6,"pk7=");     OLED_Print_Int(95,6,peak[7]);
        LDR.N    R2,??DataTable8_20
        MOVS     R1,#+6
        MOVS     R0,#+70
        BL       OLED_P6x8Str
        LDR.N    R0,??DataTable8_13
        LDR      R2,[R0, #+28]
        MOVS     R1,#+6
        MOVS     R0,#+95
        BL       OLED_Print_Int
//  689            }
//  690            break;
        B.N      ??OLED_while_6
//  691 
//  692            //------第二页显示---------               
//  693            case 2:
//  694            {
//  695                OLED_P6x8Str(6,1,"Peak_Real:"); 
??OLED_while_4:
        LDR.N    R2,??DataTable8_21
        MOVS     R1,#+1
        MOVS     R0,#+6
        BL       OLED_P6x8Str
//  696 
//  697                OLED_P6x8Str(15,3,"pk0=");     OLED_Print_Int(40,3,peak_real[0]); 
        LDR.N    R2,??DataTable8_12
        MOVS     R1,#+3
        MOVS     R0,#+15
        BL       OLED_P6x8Str
        LDR.N    R0,??DataTable8_22
        LDRB     R2,[R0, #+0]
        MOVS     R1,#+3
        MOVS     R0,#+40
        BL       OLED_Print_Int
//  698                OLED_P6x8Str(70,3,"pk1=");     OLED_Print_Int(95,3,peak_real[1]); 
        LDR.N    R2,??DataTable8_14
        MOVS     R1,#+3
        MOVS     R0,#+70
        BL       OLED_P6x8Str
        LDR.N    R0,??DataTable8_22
        LDRB     R2,[R0, #+1]
        MOVS     R1,#+3
        MOVS     R0,#+95
        BL       OLED_Print_Int
//  699                OLED_P6x8Str(15,4,"pk2=");     OLED_Print_Int(40,4,peak_real[2]); 
        LDR.N    R2,??DataTable8_15
        MOVS     R1,#+4
        MOVS     R0,#+15
        BL       OLED_P6x8Str
        LDR.N    R0,??DataTable8_22
        LDRB     R2,[R0, #+2]
        MOVS     R1,#+4
        MOVS     R0,#+40
        BL       OLED_Print_Int
//  700                OLED_P6x8Str(70,4,"pk3=");     OLED_Print_Int(95,4,peak_real[3]); 
        LDR.N    R2,??DataTable8_16
        MOVS     R1,#+4
        MOVS     R0,#+70
        BL       OLED_P6x8Str
        LDR.N    R0,??DataTable8_22
        LDRB     R2,[R0, #+3]
        MOVS     R1,#+4
        MOVS     R0,#+95
        BL       OLED_Print_Int
//  701                OLED_P6x8Str(15,5,"pk4=");     OLED_Print_Int(40,5,peak_real[4]); 
        LDR.N    R2,??DataTable8_17
        MOVS     R1,#+5
        MOVS     R0,#+15
        BL       OLED_P6x8Str
        LDR.N    R0,??DataTable8_22
        LDRB     R2,[R0, #+4]
        MOVS     R1,#+5
        MOVS     R0,#+40
        BL       OLED_Print_Int
//  702                OLED_P6x8Str(70,5,"pk5=");     OLED_Print_Int(95,5,peak_real[5]); 
        LDR.N    R2,??DataTable8_18
        MOVS     R1,#+5
        MOVS     R0,#+70
        BL       OLED_P6x8Str
        LDR.N    R0,??DataTable8_22
        LDRB     R2,[R0, #+5]
        MOVS     R1,#+5
        MOVS     R0,#+95
        BL       OLED_Print_Int
//  703                OLED_P6x8Str(15,6,"pk6=");     OLED_Print_Int(40,6,peak_real[6]); 
        LDR.N    R2,??DataTable8_19
        MOVS     R1,#+6
        MOVS     R0,#+15
        BL       OLED_P6x8Str
        LDR.N    R0,??DataTable8_22
        LDRB     R2,[R0, #+6]
        MOVS     R1,#+6
        MOVS     R0,#+40
        BL       OLED_Print_Int
//  704                OLED_P6x8Str(70,6,"pk7=");     OLED_Print_Int(95,6,peak_real[7]);
        LDR.N    R2,??DataTable8_20
        MOVS     R1,#+6
        MOVS     R0,#+70
        BL       OLED_P6x8Str
        LDR.N    R0,??DataTable8_22
        LDRB     R2,[R0, #+7]
        MOVS     R1,#+6
        MOVS     R0,#+95
        BL       OLED_Print_Int
//  705            }
//  706            break;
        B.N      ??OLED_while_6
//  707 
//  708            //------第三页显示---------                              
//  709            case 3:
//  710            {
//  711                OLED_P6x8Str(6,1,"Island:"); 
??OLED_while_3:
        LDR.N    R2,??DataTable8_23
        MOVS     R1,#+1
        MOVS     R0,#+6
        BL       OLED_P6x8Str
//  712                
//  713                OLED_P6x8Str(15,2,"Command=");   OLED_Print_Int(70,2,SendCommand);
        LDR.N    R2,??DataTable8_24
        MOVS     R1,#+2
        MOVS     R0,#+15
        BL       OLED_P6x8Str
        LDR.N    R0,??DataTable8_25
        LDRB     R2,[R0, #+0]
        MOVS     R1,#+2
        MOVS     R0,#+70
        BL       OLED_Print_Int
//  714                
//  715                OLED_P6x8Str(15,3,"Err=");      OLED_Print_Int(40,3,Error); 
        LDR.N    R2,??DataTable8_26
        MOVS     R1,#+3
        MOVS     R0,#+15
        BL       OLED_P6x8Str
        LDR.N    R0,??DataTable8_27
        LDR      R2,[R0, #+0]
        MOVS     R1,#+3
        MOVS     R0,#+40
        BL       OLED_Print_Int
//  716 
//  717                OLED_P6x8Str(15,4,"Confirm=");  
        LDR.N    R2,??DataTable8_28
        MOVS     R1,#+4
        MOVS     R0,#+15
        BL       OLED_P6x8Str
//  718                if(Flag_Island_Confirm != 0)   OLED_Print_Int(67,4,Flag_Island_Confirm/100); 
        LDR.N    R0,??DataTable8_29
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BEQ.N    ??OLED_while_7
        LDR.N    R0,??DataTable8_29
        LDR      R0,[R0, #+0]
        MOVS     R1,#+100
        SDIV     R2,R0,R1
        MOVS     R1,#+4
        MOVS     R0,#+67
        BL       OLED_Print_Int
        B.N      ??OLED_while_8
//  719                else                           OLED_P6x8Str(67,4,"No");
??OLED_while_7:
        ADR.N    R2,??DataTable8_1  ;; 0x4E, 0x6F, 0x00, 0x00
        MOVS     R1,#+4
        MOVS     R0,#+67
        BL       OLED_P6x8Str
//  720                
//  721                OLED_P6x8Str(15,5,"final=");   
??OLED_while_8:
        LDR.N    R2,??DataTable8_30
        MOVS     R1,#+5
        MOVS     R0,#+15
        BL       OLED_P6x8Str
//  722                if(final != 0)                 OLED_P6x8Str(55,5,"Yes");  
        LDR.N    R0,??DataTable8_31
        LDRB     R0,[R0, #+0]
        CMP      R0,#+0
        BEQ.N    ??OLED_while_9
        ADR.N    R2,??DataTable8_2  ;; "Yes"
        MOVS     R1,#+5
        MOVS     R0,#+55
        BL       OLED_P6x8Str
        B.N      ??OLED_while_10
//  723                else                           OLED_P6x8Str(55,5,"No");
??OLED_while_9:
        ADR.N    R2,??DataTable8_1  ;; 0x4E, 0x6F, 0x00, 0x00
        MOVS     R1,#+5
        MOVS     R0,#+55
        BL       OLED_P6x8Str
//  724 
//  725                OLED_P6x8Str(15,6,"Island=");   
??OLED_while_10:
        LDR.N    R2,??DataTable8_32
        MOVS     R1,#+6
        MOVS     R0,#+15
        BL       OLED_P6x8Str
//  726                if(Flag_Island != 0)           OLED_P6x8Str(63,6,"Yes");  
        LDR.N    R0,??DataTable8_33
        LDRB     R0,[R0, #+0]
        CMP      R0,#+0
        BEQ.N    ??OLED_while_11
        ADR.N    R2,??DataTable8_2  ;; "Yes"
        MOVS     R1,#+6
        MOVS     R0,#+63
        BL       OLED_P6x8Str
        B.N      ??OLED_while_12
//  727                else                           OLED_P6x8Str(63,6,"No");
??OLED_while_11:
        ADR.N    R2,??DataTable8_1  ;; 0x4E, 0x6F, 0x00, 0x00
        MOVS     R1,#+6
        MOVS     R0,#+63
        BL       OLED_P6x8Str
//  728 
//  729 
//  730                if(Turn_Around == 0)
??OLED_while_12:
        LDR.N    R0,??DataTable8_34
        LDRB     R0,[R0, #+0]
        CMP      R0,#+0
        BNE.N    ??OLED_while_13
//  731                {
//  732                   OLED_P6x8Str(15,7,"Ad_Turn=");   
        LDR.N    R2,??DataTable8_35
        MOVS     R1,#+7
        MOVS     R0,#+15
        BL       OLED_P6x8Str
//  733                   if(Ahead_TurnError > 0)                   OLED_P6x8Str(70,7,"Left");      
        LDR.N    R0,??DataTable8_36
        LDR      R0,[R0, #+0]
        CMP      R0,#+1
        BLT.N    ??OLED_while_14
        LDR.N    R2,??DataTable8_37
        MOVS     R1,#+7
        MOVS     R0,#+70
        BL       OLED_P6x8Str
        B.N      ??OLED_while_15
//  734                   else if(Ahead_TurnError < 0)              OLED_P6x8Str(70,7,"Right"); 
??OLED_while_14:
        LDR.N    R0,??DataTable8_36
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BPL.N    ??OLED_while_16
        LDR.N    R2,??DataTable8_38
        MOVS     R1,#+7
        MOVS     R0,#+70
        BL       OLED_P6x8Str
        B.N      ??OLED_while_15
//  735                   else                                      OLED_P6x8Str(70,7,"No");
??OLED_while_16:
        ADR.N    R2,??DataTable8_1  ;; 0x4E, 0x6F, 0x00, 0x00
        MOVS     R1,#+7
        MOVS     R0,#+70
        BL       OLED_P6x8Str
        B.N      ??OLED_while_15
//  736                }
//  737                else
//  738                {
//  739                   OLED_P6x8Str(15,7,"Bd_Turn=");   
??OLED_while_13:
        LDR.N    R2,??DataTable8_39
        MOVS     R1,#+7
        MOVS     R0,#+15
        BL       OLED_P6x8Str
//  740                   if(Dir_IslandTurn == Turn_Left)          OLED_P6x8Str(70,7,"Left");      
        LDR.N    R0,??DataTable8_40
        LDRB     R0,[R0, #+0]
        CMP      R0,#+107
        BNE.N    ??OLED_while_17
        LDR.N    R2,??DataTable8_37
        MOVS     R1,#+7
        MOVS     R0,#+70
        BL       OLED_P6x8Str
        B.N      ??OLED_while_15
//  741                   else if(Dir_IslandTurn == Turn_Right)    OLED_P6x8Str(70,7,"Right"); 
??OLED_while_17:
        LDR.N    R0,??DataTable8_40
        LDRB     R0,[R0, #+0]
        CMP      R0,#+106
        BNE.N    ??OLED_while_18
        LDR.N    R2,??DataTable8_38
        MOVS     R1,#+7
        MOVS     R0,#+70
        BL       OLED_P6x8Str
        B.N      ??OLED_while_15
//  742                   else                                      OLED_P6x8Str(70,7,"No");
??OLED_while_18:
        ADR.N    R2,??DataTable8_1  ;; 0x4E, 0x6F, 0x00, 0x00
        MOVS     R1,#+7
        MOVS     R0,#+70
        BL       OLED_P6x8Str
//  743                }
//  744            }
//  745            break;
??OLED_while_15:
        B.N      ??OLED_while_6
//  746 
//  747            //------第四页参数---------                                             
//  748            case 4:
//  749            {
//  750           
//  751                
//  752                OLED_P6x8Str(15,2,"Sum_Dis");   OLED_Print_Int(70,2,Sum_Distance/100);
??OLED_while_5:
        LDR.N    R2,??DataTable8_41
        MOVS     R1,#+2
        MOVS     R0,#+15
        BL       OLED_P6x8Str
        LDR.N    R0,??DataTable8_42
        LDR      R0,[R0, #+0]
        MOVS     R1,#+100
        SDIV     R2,R0,R1
        MOVS     R1,#+2
        MOVS     R0,#+70
        BL       OLED_Print_Int
//  753                
//  754                OLED_P6x8Str(15,3,"Err=");      OLED_Print_Int(40,3,Error); 
        LDR.N    R2,??DataTable8_26
        MOVS     R1,#+3
        MOVS     R0,#+15
        BL       OLED_P6x8Str
        LDR.N    R0,??DataTable8_27
        LDR      R2,[R0, #+0]
        MOVS     R1,#+3
        MOVS     R0,#+40
        BL       OLED_Print_Int
//  755 
//  756           
//  757           
//  758            }
//  759            break;
        B.N      ??OLED_while_6
//  760                             
//  761            default:
//  762            break;
??OLED_while_2:
        B.N      ??OLED_while_6
//  763         }        
//  764 
//  765     }
//  766     
//  767     //----调参界面显示------   
//  768     else
//  769     {
//  770         OLED_P6x8Str(6,0,"Debug:"); 
??OLED_while_0:
        LDR.N    R2,??DataTable8_43
        MOVS     R1,#+0
        MOVS     R0,#+6
        BL       OLED_P6x8Str
//  771         OLED_P6x8Str(0,Debug_Para_Slt+1,"->"); 
        ADR.N    R2,??DataTable8_3  ;; 0x2D, 0x3E, 0x00, 0x00
        LDR.N    R0,??DataTable8_44
        LDRSB    R0,[R0, #+0]
        ADDS     R1,R0,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+0
        BL       OLED_P6x8Str
//  772 
//  773         
//  774         switch(Debug_Page_Slt)
        LDR.N    R0,??DataTable8_45
        LDRSB    R0,[R0, #+0]
        CMP      R0,#+1
        BEQ.N    ??OLED_while_19
        BCC.N    ??OLED_while_20
        CMP      R0,#+3
        BEQ.N    ??OLED_while_21
        BCC.N    ??OLED_while_22
        CMP      R0,#+4
        BEQ.N    ??OLED_while_23
        B.N      ??OLED_while_20
//  775         {
//  776            //------第一页显示---------
//  777            case 1:
//  778            {
//  779                
//  780            }
//  781            break;
??OLED_while_19:
        B.N      ??OLED_while_6
//  782 
//  783            //------第二页显示---------               
//  784            case 2:
//  785            {
//  786            }
//  787            break;
??OLED_while_22:
        B.N      ??OLED_while_6
//  788 
//  789            //------第三页显示---------                              
//  790            case 3:
//  791            {
//  792            }
//  793            break;
??OLED_while_21:
        B.N      ??OLED_while_6
//  794 
//  795            //------第四页参数---------                                             
//  796            case 4:
//  797            {
//  798            }
//  799            break;
??OLED_while_23:
        B.N      ??OLED_while_6
//  800                             
//  801            default:
//  802            break;
//  803         }        
//  804     }
//  805  }
??OLED_while_20:
??OLED_while_6:
        POP      {R0,PC}          ;; return
//  806    
//  807 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  808 void OLED_Stop()
//  809  {
OLED_Stop:
        PUSH     {R7,LR}
//  810      OLED_P6x8Str(20, 3,"STOP!!");
        LDR.N    R2,??DataTable8_46
        MOVS     R1,#+3
        MOVS     R0,#+20
        BL       OLED_P6x8Str
//  811  }
        POP      {R0,PC}          ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8:
        DC32     0x400ff0c0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_1:
        DC8      0x4E, 0x6F, 0x00, 0x00

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_2:
        DC8      "Yes"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_3:
        DC8      0x2D, 0x3E, 0x00, 0x00

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_4:
        DC32     F6x8

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_5:
        DC32     F8X16

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_6:
        DC32     0x41200000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_7:
        DC32     0x42c80000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_8:
        DC32     ShowOrDebug

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_9:
        DC32     ?_3

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_10:
        DC32     Show_Page_Slt

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_11:
        DC32     ?_4

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_12:
        DC32     ?_5

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_13:
        DC32     peak

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_14:
        DC32     ?_6

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_15:
        DC32     ?_7

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_16:
        DC32     ?_8

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_17:
        DC32     ?_9

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_18:
        DC32     ?_10

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_19:
        DC32     ?_11

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_20:
        DC32     ?_12

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_21:
        DC32     ?_13

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_22:
        DC32     peak_real

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_23:
        DC32     ?_14

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_24:
        DC32     ?_15

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_25:
        DC32     SendCommand

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_26:
        DC32     ?_16

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_27:
        DC32     Error

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_28:
        DC32     ?_17

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_29:
        DC32     Flag_Island_Confirm

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_30:
        DC32     ?_19

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_31:
        DC32     final

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_32:
        DC32     ?_21

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_33:
        DC32     Flag_Island

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_34:
        DC32     Turn_Around

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_35:
        DC32     ?_22

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_36:
        DC32     Ahead_TurnError

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_37:
        DC32     ?_23

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_38:
        DC32     ?_24

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_39:
        DC32     ?_25

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_40:
        DC32     Dir_IslandTurn

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_41:
        DC32     ?_26

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_42:
        DC32     Sum_Distance

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_43:
        DC32     ?_27

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_44:
        DC32     Debug_Para_Slt

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_45:
        DC32     Debug_Page_Slt

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_46:
        DC32     ?_29

        SECTION `.iar_vfe_header`:DATA:NOALLOC:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
        DC32 0

        SECTION __DLIB_PERTHREAD:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION __DLIB_PERTHREAD_init:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        END
//  812 
//  813 
// 
// 2 790 bytes in section .rodata
// 3 516 bytes in section .text
// 
// 3 516 bytes of CODE  memory
// 2 790 bytes of CONST memory
//
//Errors: none
//Warnings: none
