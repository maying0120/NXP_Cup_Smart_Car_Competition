###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        10/Jul/2017  21:37:29
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\app\chase_after.c
#    Command line =  
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\app\chase_after.c
#        -D LPLD_K60 -D USE_K60F12 -lCN
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\FLASH\List\
#        -lB
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\FLASH\List\
#        -o
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4F -e --fpu=None --dlib_config
#        D:\IAR\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\app\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\common\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\USB\class\
#        -Ol -I D:\IAR\arm\CMSIS\Include\ -D ARM_MATH_CM4
#    List file    =  
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\FLASH\List\chase_after.lst
#    Object file  =  
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\FLASH\Obj\chase_after.o
#
###############################################################################

C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\app\chase_after.c
      1          
      2          #include "Includes.h"
      3          

   \                                 In section .bss, align 1
      4          uint8 Turn_Around = 0;   //前车为0，后车为1
   \                     Turn_Around:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
      5          uint8 Family_Status = 0;   //老大为0，老二为1
   \                     Family_Status:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
      6          uint8 Spd_Switch, Spd_Switch_A, Spd_Switch_B;
   \                     Spd_Switch:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     Spd_Switch_A:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     Spd_Switch_B:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
      7          uint8 Single_Run = 0;
   \                     Single_Run:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
      8          uint8 OverTake_Island = 0;
   \                     OverTake_Island:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
      9          uint8 OverTake_Straight = 0;
   \                     OverTake_Straight:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     10          uint8 Case2_Ahead_KeepSide = 0;
   \                     Case2_Ahead_KeepSide:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     11          uint8 Case2_Behind_KeepSide = 0;
   \                     Case2_Behind_KeepSide:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     12          uint32 Case2_Behind_SwitchDis = 0;
   \                     Case2_Behind_SwitchDis:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
     13          uint8 OverTake_CrossRoad;
   \                     OverTake_CrossRoad:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     14          uint8 Case3_Ahead_Stop;
   \                     Case3_Ahead_Stop:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     15          uint8 Case3_Behind_Pass;
   \                     Case3_Behind_Pass:
   \   00000000                      DS8 1

   \                                 In section .data, align 1
     16          uint8 Page_Slt = 1;
   \                     Page_Slt:
   \   00000000   0x01               DC8 1

   \                                 In section .bss, align 1
     17          uint8 SendCommand = 0;
   \                     SendCommand:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     18          uint8 Command_Cnt = 0;
   \                     Command_Cnt:
   \   00000000                      DS8 1
     19          extern int Count;
     20          extern uint8 SendData_Arise;
     21          extern uint8 SendData_Clear;
     22          extern uint8 SendData_Arise_Cnt;
     23          
     24          void Status_Init(void); 

   \                                 In section .bss, align 4
     25          int while_cnt;
   \                     while_cnt:
   \   00000000                      DS8 4
     26          
     27          
     28          //--------主函数入口--------//

   \                                 In section .text, align 2, keep-with-next
     29          void main (void)   
     30          {    
   \                     main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     31            DisableInterrupts;
   \   00000002   0xB672             CPSID    I
     32              
     33            //模块初始化
     34            HardwareInit(); 
   \   00000004   0x.... 0x....      BL       HardwareInit
     35            
     36            //开机状态选择
     37            Status_Init();  
   \   00000008   0x.... 0x....      BL       Status_Init
     38            
     39            EnableInterrupts;
   \   0000000C   0xB662             CPSIE    I
   \   0000000E   0xE025             B.N      ??main_0
     40          
     41            while(1)
     42             {  
     43                //-------------无线部分---------------
     44                  // 发送指令
     45                   if(SendCommand != 0)
     46                     { 
     47                       if(Command_Cnt == 0)
     48                         {
     49                            if(SendCommand>=Command_Start && SendCommand<=Command_End)    Command_Cnt = 3;
     50                            else  Command_Cnt = 1;
   \                     ??main_1: (+1)
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x....             LDR.N    R1,??DataTable1
   \   00000014   0x7008             STRB     R0,[R1, #+0]
     51                         }
     52                         
     53                       Commu_Onetime(SendCommand); 
   \                     ??main_2: (+1)
   \   00000016   0x....             LDR.N    R0,??DataTable1_1
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x.... 0x....      BL       Commu_Onetime
     54                       
     55                       Command_Cnt--;
   \   0000001E   0x....             LDR.N    R0,??DataTable1
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x1E40             SUBS     R0,R0,#+1
   \   00000024   0x....             LDR.N    R1,??DataTable1
   \   00000026   0x7008             STRB     R0,[R1, #+0]
     56                       if(Command_Cnt == 0)    SendCommand = 0;
   \   00000028   0x....             LDR.N    R0,??DataTable1
   \   0000002A   0x7800             LDRB     R0,[R0, #+0]
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD102             BNE.N    ??main_3
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x....             LDR.N    R1,??DataTable1_1
   \   00000034   0x7008             STRB     R0,[R1, #+0]
     57                     }
     58                        
     59                   //双车距离通信
     60                   Commun_Shift();
   \                     ??main_3: (+1)
   \   00000036   0x.... 0x....      BL       Commun_Shift
     61          
     62                   //发送数据到电脑
     63                //   SendData();  
     64                  
     65               
     66                //--------------按键调参-------------
     67                   Keyboard(); 
   \   0000003A   0x.... 0x....      BL       Keyboard
     68              
     69                    
     70                //--------------OLED显示-------------
     71                   if(Count%30 == 0)
   \   0000003E   0x201E             MOVS     R0,#+30
   \   00000040   0x....             LDR.N    R1,??DataTable1_2
   \   00000042   0x6809             LDR      R1,[R1, #+0]
   \   00000044   0x....             LDR.N    R2,??DataTable1_2
   \   00000046   0x6812             LDR      R2,[R2, #+0]
   \   00000048   0xFB92 0xF2F0      SDIV     R2,R2,R0
   \   0000004C   0xFB00 0x1012      MLS      R0,R0,R2,R1
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD103             BNE.N    ??main_0
     72                      OLED_while(Page_Slt);     
   \   00000054   0x....             LDR.N    R0,??DataTable1_3
   \   00000056   0x7800             LDRB     R0,[R0, #+0]
   \   00000058   0x.... 0x....      BL       OLED_while
   \                     ??main_0: (+1)
   \   0000005C   0x....             LDR.N    R0,??DataTable1_1
   \   0000005E   0x7800             LDRB     R0,[R0, #+0]
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD0E8             BEQ.N    ??main_3
   \   00000064   0x....             LDR.N    R0,??DataTable1
   \   00000066   0x7800             LDRB     R0,[R0, #+0]
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD1D4             BNE.N    ??main_2
   \   0000006C   0x....             LDR.N    R0,??DataTable1_1
   \   0000006E   0x7800             LDRB     R0,[R0, #+0]
   \   00000070   0x3868             SUBS     R0,R0,#+104
   \   00000072   0x282F             CMP      R0,#+47
   \   00000074   0xD2CC             BCS.N    ??main_1
   \   00000076   0x2003             MOVS     R0,#+3
   \   00000078   0x....             LDR.N    R1,??DataTable1
   \   0000007A   0x7008             STRB     R0,[R1, #+0]
   \   0000007C   0xE7CB             B.N      ??main_2
     73             } 
     74          }
     75          
     76          
     77          
     78          //--------开机状态选择--------

   \                                 In section .text, align 2, keep-with-next
     79          void Status_Init()
     80          {
   \                     Status_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     81            DialSwitch_init();
   \   00000002   0x.... 0x....      BL       DialSwitch_init
     82            
     83            //老大老二选择
     84            Family_Status = 1 - LPLD_GPIO_Input_b(PTD, 7);  
   \   00000006   0x2107             MOVS     R1,#+7
   \   00000008   0x....             LDR.N    R0,??DataTable1_4  ;; 0x400ff0c0
   \   0000000A   0x.... 0x....      BL       LPLD_GPIO_Input_b
   \   0000000E   0xF1D0 0x0001      RSBS     R0,R0,#+1
   \   00000012   0x....             LDR.N    R1,??DataTable1_5
   \   00000014   0x7008             STRB     R0,[R1, #+0]
     85            Turn_Around   = 1 - LPLD_GPIO_Input_b(PTD, 6);
   \   00000016   0x2106             MOVS     R1,#+6
   \   00000018   0x....             LDR.N    R0,??DataTable1_4  ;; 0x400ff0c0
   \   0000001A   0x.... 0x....      BL       LPLD_GPIO_Input_b
   \   0000001E   0xF1D0 0x0001      RSBS     R0,R0,#+1
   \   00000022   0x....             LDR.N    R1,??DataTable1_6
   \   00000024   0x7008             STRB     R0,[R1, #+0]
     86            
     87            if(Turn_Around == 0)
   \   00000026   0x....             LDR.N    R0,??DataTable1_6
   \   00000028   0x7800             LDRB     R0,[R0, #+0]
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD108             BNE.N    ??Status_Init_0
     88              {   
     89                 Commu_Onetime(Start_Admit);
   \   0000002E   0x2065             MOVS     R0,#+101
   \   00000030   0x.... 0x....      BL       Commu_Onetime
     90                 LPLD_LPTMR_DelayMs(500);
   \   00000034   0xF44F 0x70FA      MOV      R0,#+500
   \   00000038   0x.... 0x....      BL       LPLD_LPTMR_DelayMs
     91                 pit_10ms_init();    
   \   0000003C   0x.... 0x....      BL       pit_10ms_init
     92              }
     93            
     94            //速度档位选择
     95            Spd_Switch_A  = 1 - LPLD_GPIO_Input_b(PTD, 9);
   \                     ??Status_Init_0: (+1)
   \   00000040   0x2109             MOVS     R1,#+9
   \   00000042   0x....             LDR.N    R0,??DataTable1_4  ;; 0x400ff0c0
   \   00000044   0x.... 0x....      BL       LPLD_GPIO_Input_b
   \   00000048   0xF1D0 0x0001      RSBS     R0,R0,#+1
   \   0000004C   0x....             LDR.N    R1,??DataTable1_7
   \   0000004E   0x7008             STRB     R0,[R1, #+0]
     96            Spd_Switch_B  = 1 - LPLD_GPIO_Input_b(PTD, 8);
   \   00000050   0x2108             MOVS     R1,#+8
   \   00000052   0x....             LDR.N    R0,??DataTable1_4  ;; 0x400ff0c0
   \   00000054   0x.... 0x....      BL       LPLD_GPIO_Input_b
   \   00000058   0xF1D0 0x0001      RSBS     R0,R0,#+1
   \   0000005C   0x....             LDR.N    R1,??DataTable1_8
   \   0000005E   0x7008             STRB     R0,[R1, #+0]
     97            Spd_Switch = Spd_Switch_A*2 + Spd_Switch_B + 1;
   \   00000060   0x....             LDR.N    R0,??DataTable1_7
   \   00000062   0x7800             LDRB     R0,[R0, #+0]
   \   00000064   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000066   0x....             LDR.N    R1,??DataTable1_8
   \   00000068   0x7809             LDRB     R1,[R1, #+0]
   \   0000006A   0xEB11 0x0040      ADDS     R0,R1,R0, LSL #+1
   \   0000006E   0x1C40             ADDS     R0,R0,#+1
   \   00000070   0x....             LDR.N    R1,??DataTable1_9
   \   00000072   0x7008             STRB     R0,[R1, #+0]
     98            
     99            //方案选择
    100            Single_Run = No;
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x....             LDR.N    R1,??DataTable1_10
   \   00000078   0x7008             STRB     R0,[R1, #+0]
    101            OverTake_Island = 4*LPLD_GPIO_Input_b(PTD, 11);
   \   0000007A   0x210B             MOVS     R1,#+11
   \   0000007C   0x....             LDR.N    R0,??DataTable1_4  ;; 0x400ff0c0
   \   0000007E   0x.... 0x....      BL       LPLD_GPIO_Input_b
   \   00000082   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000084   0x0080             LSLS     R0,R0,#+2
   \   00000086   0x....             LDR.N    R1,??DataTable1_11
   \   00000088   0x7008             STRB     R0,[R1, #+0]
    102            OverTake_Straight = LPLD_GPIO_Input_b(PTD, 10);
   \   0000008A   0x210A             MOVS     R1,#+10
   \   0000008C   0x....             LDR.N    R0,??DataTable1_4  ;; 0x400ff0c0
   \   0000008E   0x.... 0x....      BL       LPLD_GPIO_Input_b
   \   00000092   0x....             LDR.N    R1,??DataTable1_12
   \   00000094   0x7008             STRB     R0,[R1, #+0]
    103          
    104            if(OverTake_Straight == Yes)
   \   00000096   0x....             LDR.N    R0,??DataTable1_12
   \   00000098   0x7800             LDRB     R0,[R0, #+0]
   \   0000009A   0x2801             CMP      R0,#+1
   \   0000009C   0xD105             BNE.N    ??Status_Init_1
    105              {
    106                Case2_Ahead_KeepSide = 1;
   \   0000009E   0x2001             MOVS     R0,#+1
   \   000000A0   0x....             LDR.N    R1,??DataTable1_13
   \   000000A2   0x7008             STRB     R0,[R1, #+0]
    107                Case2_Behind_KeepSide = 1;
   \   000000A4   0x2001             MOVS     R0,#+1
   \   000000A6   0x....             LDR.N    R1,??DataTable1_14
   \   000000A8   0x7008             STRB     R0,[R1, #+0]
    108              }
    109          }
   \                     ??Status_Init_1: (+1)
   \   000000AA   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     Command_Cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     SendCommand

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     Count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     Page_Slt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x400FF0C0         DC32     0x400ff0c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     Family_Status

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x........         DC32     Turn_Around

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x........         DC32     Spd_Switch_A

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x........         DC32     Spd_Switch_B

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0x........         DC32     Spd_Switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \   00000000   0x........         DC32     Single_Run

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \   00000000   0x........         DC32     OverTake_Island

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_12:
   \   00000000   0x........         DC32     OverTake_Straight

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_13:
   \   00000000   0x........         DC32     Case2_Ahead_KeepSide

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_14:
   \   00000000   0x........         DC32     Case2_Behind_KeepSide
    110          
    111          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Status_Init
         8   -> Commu_Onetime
         8   -> DialSwitch_init
         8   -> LPLD_GPIO_Input_b
         8   -> LPLD_LPTMR_DelayMs
         8   -> pit_10ms_init
       8   main
         8   -> Commu_Onetime
         8   -> Commun_Shift
         8   -> HardwareInit
         8   -> Keyboard
         8   -> OLED_while
         8   -> Status_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_13
       4  ??DataTable1_14
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
       1  Case2_Ahead_KeepSide
       1  Case2_Behind_KeepSide
       4  Case2_Behind_SwitchDis
       1  Case3_Ahead_Stop
       1  Case3_Behind_Pass
       1  Command_Cnt
       1  Family_Status
       1  OverTake_CrossRoad
       1  OverTake_Island
       1  OverTake_Straight
       1  Page_Slt
       1  SendCommand
       1  Single_Run
       1  Spd_Switch
       1  Spd_Switch_A
       1  Spd_Switch_B
     172  Status_Init
       1  Turn_Around
     126  main
       4  while_cnt

 
  23 bytes in section .bss
   1 byte  in section .data
 358 bytes in section .text
 
 358 bytes of CODE memory
  24 bytes of DATA memory

Errors: none
Warnings: none
