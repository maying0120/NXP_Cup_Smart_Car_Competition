###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        10/Jul/2017  21:37:31
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\app\hardware.c
#    Command line =  
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\app\hardware.c
#        -D LPLD_K60 -D USE_K60F12 -lCN
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\FLASH\List\
#        -lB
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\FLASH\List\
#        -o
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4F -e --fpu=None --dlib_config
#        D:\IAR\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\app\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\common\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\USB\class\
#        -Ol -I D:\IAR\arm\CMSIS\Include\ -D ARM_MATH_CM4
#    List file    =  
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\FLASH\List\hardware.lst
#    Object file  =  
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\FLASH\Obj\hardware.o
#
###############################################################################

C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\app\hardware.c
      1          #include "Includes.h"
      2          
      3          extern uint8 Turn_Around;
      4          extern int Rudder_Init;
      5          

   \                                 In section .text, align 2, keep-with-next
      6          void HardwareInit()
      7          { 
   \                     HardwareInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
      8            //LPLD_Flash_Init();
      9            nvic_init(); 
   \   00000002   0x.... 0x....      BL       nvic_init
     10            
     11            bluetooth_uart4_init();
   \   00000006   0x.... 0x....      BL       bluetooth_uart4_init
     12            LPLD_LPTMR_DelayMs(1000); 
   \   0000000A   0xF44F 0x707A      MOV      R0,#+1000
   \   0000000E   0x.... 0x....      BL       LPLD_LPTMR_DelayMs
     13            hcsr04_init();
   \   00000012   0x.... 0x....      BL       hcsr04_init
     14            pit_hcsr04_init();
   \   00000016   0x.... 0x....      BL       pit_hcsr04_init
     15            sensor_adc_init();
   \   0000001A   0x.... 0x....      BL       sensor_adc_init
     16            Rudder_ftm2_init();  
   \   0000001E   0x.... 0x....      BL       Rudder_ftm2_init
     17            Motor_ftm0_init(); 
   \   00000022   0x.... 0x....      BL       Motor_ftm0_init
     18            qd_ftm1_init(); 
   \   00000026   0x.... 0x....      BL       qd_ftm1_init
     19            Stop_init();
   \   0000002A   0x.... 0x....      BL       Stop_init
     20            DialSwitch_init();  
   \   0000002E   0x.... 0x....      BL       DialSwitch_init
     21            Led_init();
   \   00000032   0x.... 0x....      BL       Led_init
     22            OLED_Init();
   \   00000036   0x.... 0x....      BL       OLED_Init
     23            KeyBoard_init();
   \   0000003A   0x.... 0x....      BL       KeyBoard_init
     24          }
   \   0000003E   0xBD01             POP      {R0,PC}          ;; return
     25          

   \                                 In section .text, align 2, keep-with-next
     26          void bluetooth_uart4_init()
     27          {
   \                     bluetooth_uart4_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
     28            UART_InitTypeDef  uart4_init_struct;
     29            uart4_init_struct.UART_Uartx = UART4;         //使用UART3	
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable12  ;; 0x400ea000
   \   00000008   0x9003             STR      R0,[SP, #+12]
     30            uart4_init_struct.UART_BaudRate = 115200;     //设置波特率9600
   \   0000000A   0xF45F 0x30E1      MOVS     R0,#+115200
   \   0000000E   0x9004             STR      R0,[SP, #+16]
     31            uart4_init_struct.UART_RxIntEnable = TRUE;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xF88D 0x0016      STRB     R0,[SP, #+22]
     32            uart4_init_struct.UART_TxPin = PTE24;          
   \   00000016   0x2094             MOVS     R0,#+148
   \   00000018   0xF88D 0x0014      STRB     R0,[SP, #+20]
     33            uart4_init_struct.UART_RxPin = PTE25;       
   \   0000001C   0x2095             MOVS     R0,#+149
   \   0000001E   0xF88D 0x0015      STRB     R0,[SP, #+21]
     34            uart4_init_struct.UART_RxIsr = RecData;
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable12_1
   \   00000026   0x9008             STR      R0,[SP, #+32]
     35            LPLD_UART_Init(uart4_init_struct);
   \   00000028   0xA903             ADD      R1,SP,#+12
   \   0000002A   0xB084             SUB      SP,SP,#+16
   \   0000002C   0x4668             MOV      R0,SP
   \   0000002E   0x221C             MOVS     R2,#+28
   \   00000030   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000034   0xBC0F             POP      {R0-R3}
   \   00000036   0x.... 0x....      BL       LPLD_UART_Init
     36            LPLD_UART_EnableIrq(uart4_init_struct);
   \   0000003A   0xA903             ADD      R1,SP,#+12
   \   0000003C   0xB084             SUB      SP,SP,#+16
   \   0000003E   0x4668             MOV      R0,SP
   \   00000040   0x221C             MOVS     R2,#+28
   \   00000042   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000046   0xBC0F             POP      {R0-R3}
   \   00000048   0x.... 0x....      BL       LPLD_UART_EnableIrq
     37            
     38            GPIO_InitTypeDef  M0_init_struct;
     39            M0_init_struct.GPIO_PTx = PTE;
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable12_2  ;; 0x400ff100
   \   00000050   0x9001             STR      R0,[SP, #+4]
     40            M0_init_struct.GPIO_Pins = GPIO_Pin26;
   \   00000052   0xF05F 0x6080      MOVS     R0,#+67108864
   \   00000056   0x9002             STR      R0,[SP, #+8]
     41            M0_init_struct.GPIO_PinControl = IRQC_DIS|OUTPUT_DSH;
   \   00000058   0x2040             MOVS     R0,#+64
   \   0000005A   0x9003             STR      R0,[SP, #+12]
     42            M0_init_struct.GPIO_Dir = DIR_OUTPUT;
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0xF88D 0x0010      STRB     R0,[SP, #+16]
     43            M0_init_struct.GPIO_Output = OUTPUT_H;
   \   00000062   0x2001             MOVS     R0,#+1
   \   00000064   0xF88D 0x0011      STRB     R0,[SP, #+17]
     44            M0_init_struct.GPIO_Isr = NULL;
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x9005             STR      R0,[SP, #+20]
     45            LPLD_GPIO_Init(M0_init_struct);    
   \   0000006C   0xA901             ADD      R1,SP,#+4
   \   0000006E   0xB084             SUB      SP,SP,#+16
   \   00000070   0x4668             MOV      R0,SP
   \   00000072   0x2214             MOVS     R2,#+20
   \   00000074   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000078   0xBC0F             POP      {R0-R3}
   \   0000007A   0x.... 0x....      BL       LPLD_GPIO_Init
     46          
     47            GPIO_InitTypeDef  M1_init_struct;
     48            M1_init_struct.GPIO_PTx = PTE;
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable12_2  ;; 0x400ff100
   \   00000082   0x9001             STR      R0,[SP, #+4]
     49            M1_init_struct.GPIO_Pins = GPIO_Pin27;
   \   00000084   0xF05F 0x6000      MOVS     R0,#+134217728
   \   00000088   0x9002             STR      R0,[SP, #+8]
     50            M1_init_struct.GPIO_PinControl = IRQC_DIS|OUTPUT_DSH;
   \   0000008A   0x2040             MOVS     R0,#+64
   \   0000008C   0x9003             STR      R0,[SP, #+12]
     51            M1_init_struct.GPIO_Dir = DIR_OUTPUT;
   \   0000008E   0x2001             MOVS     R0,#+1
   \   00000090   0xF88D 0x0010      STRB     R0,[SP, #+16]
     52            M1_init_struct.GPIO_Output = OUTPUT_L;
   \   00000094   0x2000             MOVS     R0,#+0
   \   00000096   0xF88D 0x0011      STRB     R0,[SP, #+17]
     53            M1_init_struct.GPIO_Isr = NULL;
   \   0000009A   0x2000             MOVS     R0,#+0
   \   0000009C   0x9005             STR      R0,[SP, #+20]
     54            LPLD_GPIO_Init(M1_init_struct);    
   \   0000009E   0xA901             ADD      R1,SP,#+4
   \   000000A0   0xB084             SUB      SP,SP,#+16
   \   000000A2   0x4668             MOV      R0,SP
   \   000000A4   0x2214             MOVS     R2,#+20
   \   000000A6   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000AA   0xBC0F             POP      {R0-R3}
   \   000000AC   0x.... 0x....      BL       LPLD_GPIO_Init
     55          }
   \   000000B0   0xB00B             ADD      SP,SP,#+44
   \   000000B2   0xBD00             POP      {PC}             ;; return
     56          

   \                                 In section .text, align 2, keep-with-next
     57          void hcsr04_init()
     58          {
   \                     hcsr04_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     59            //超声波回响信号：PTA10作为ECHO
     60            GPIO_InitTypeDef  hc_echo_init_struct;
     61            hc_echo_init_struct.GPIO_PTx = PTA;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable12_3  ;; 0x400ff000
   \   00000008   0x9001             STR      R0,[SP, #+4]
     62            hc_echo_init_struct.GPIO_Pins = GPIO_Pin10;
   \   0000000A   0xF44F 0x6080      MOV      R0,#+1024
   \   0000000E   0x9002             STR      R0,[SP, #+8]
     63            hc_echo_init_struct.GPIO_PinControl = IRQC_ET;
   \   00000010   0xF45F 0x2030      MOVS     R0,#+720896
   \   00000014   0x9003             STR      R0,[SP, #+12]
     64            hc_echo_init_struct.GPIO_Dir = DIR_INPUT;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x0010      STRB     R0,[SP, #+16]
     65            hc_echo_init_struct.GPIO_Isr = UltraDis_Measure;
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   00000020   0x9005             STR      R0,[SP, #+20]
     66            LPLD_GPIO_Init(hc_echo_init_struct);    
   \   00000022   0xA901             ADD      R1,SP,#+4
   \   00000024   0xB084             SUB      SP,SP,#+16
   \   00000026   0x4668             MOV      R0,SP
   \   00000028   0x2214             MOVS     R2,#+20
   \   0000002A   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000002E   0xBC0F             POP      {R0-R3}
   \   00000030   0x.... 0x....      BL       LPLD_GPIO_Init
     67            LPLD_GPIO_EnableIrq(hc_echo_init_struct);
   \   00000034   0xA901             ADD      R1,SP,#+4
   \   00000036   0xB084             SUB      SP,SP,#+16
   \   00000038   0x4668             MOV      R0,SP
   \   0000003A   0x2214             MOVS     R2,#+20
   \   0000003C   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000040   0xBC0F             POP      {R0-R3}
   \   00000042   0x.... 0x....      BL       LPLD_GPIO_EnableIrq
     68          }
   \   00000046   0xB007             ADD      SP,SP,#+28
   \   00000048   0xBD00             POP      {PC}             ;; return
     69          

   \                                 In section .text, align 2, keep-with-next
     70          void pit_10ms_init(void)
     71          {
   \                     pit_10ms_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     72            PIT_InitTypeDef  pit0_init_struct; 
     73            pit0_init_struct.PIT_Pitx = PIT0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF88D 0x0004      STRB     R0,[SP, #+4]
     74            pit0_init_struct.PIT_PeriodS = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x9004             STR      R0,[SP, #+16]
     75            pit0_init_struct.PIT_PeriodUs = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x9002             STR      R0,[SP, #+8]
     76            pit0_init_struct.PIT_PeriodMs = 10;  //定时周期5ms
   \   00000012   0x200A             MOVS     R0,#+10
   \   00000014   0x9003             STR      R0,[SP, #+12]
     77            pit0_init_struct.PIT_Isr = pit_10ms;//设置中断函数
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable12_5
   \   0000001A   0x9005             STR      R0,[SP, #+20]
     78            LPLD_PIT_Init(pit0_init_struct);    //初始化PIT0
   \   0000001C   0xA901             ADD      R1,SP,#+4
   \   0000001E   0xB084             SUB      SP,SP,#+16
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0x2214             MOVS     R2,#+20
   \   00000024   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000028   0xBC0F             POP      {R0-R3}
   \   0000002A   0x.... 0x....      BL       LPLD_PIT_Init
     79            LPLD_PIT_EnableIrq(pit0_init_struct);
   \   0000002E   0xA901             ADD      R1,SP,#+4
   \   00000030   0xB084             SUB      SP,SP,#+16
   \   00000032   0x4668             MOV      R0,SP
   \   00000034   0x2214             MOVS     R2,#+20
   \   00000036   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000003A   0xBC0F             POP      {R0-R3}
   \   0000003C   0x.... 0x....      BL       LPLD_PIT_EnableIrq
     80          }
   \   00000040   0xB007             ADD      SP,SP,#+28
   \   00000042   0xBD00             POP      {PC}             ;; return
     81          

   \                                 In section .text, align 2, keep-with-next
     82          void nvic_init()
     83          {
   \                     nvic_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     84            NVIC_InitTypeDef nvic_init_struct;
     85           
     86            //配置PIT1_IRQn的抢占优先级为4
     87            nvic_init_struct.NVIC_IRQChannel = PIT1_IRQn;
   \   00000004   0x2045             MOVS     R0,#+69
   \   00000006   0xF88D 0x0004      STRB     R0,[SP, #+4]
     88            nvic_init_struct.NVIC_IRQChannelGroupPriority = NVIC_PriorityGroup_2;
   \   0000000A   0x2005             MOVS     R0,#+5
   \   0000000C   0x9002             STR      R0,[SP, #+8]
     89            nvic_init_struct.NVIC_IRQChannelPreemptionPriority = 3;
   \   0000000E   0x2003             MOVS     R0,#+3
   \   00000010   0x9003             STR      R0,[SP, #+12]
     90            LPLD_NVIC_Init(nvic_init_struct);
   \   00000012   0xA901             ADD      R1,SP,#+4
   \   00000014   0xB084             SUB      SP,SP,#+16
   \   00000016   0x4668             MOV      R0,SP
   \   00000018   0x2214             MOVS     R2,#+20
   \   0000001A   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000001E   0xBC0F             POP      {R0-R3}
   \   00000020   0x.... 0x....      BL       LPLD_NVIC_Init
     91            
     92            //配置PIT0_IRQn的抢占优先级为3
     93            nvic_init_struct.NVIC_IRQChannel = PIT0_IRQn;
   \   00000024   0x2044             MOVS     R0,#+68
   \   00000026   0xF88D 0x0004      STRB     R0,[SP, #+4]
     94            nvic_init_struct.NVIC_IRQChannelGroupPriority = NVIC_PriorityGroup_2;
   \   0000002A   0x2005             MOVS     R0,#+5
   \   0000002C   0x9002             STR      R0,[SP, #+8]
     95            nvic_init_struct.NVIC_IRQChannelPreemptionPriority = 2;
   \   0000002E   0x2002             MOVS     R0,#+2
   \   00000030   0x9003             STR      R0,[SP, #+12]
     96            LPLD_NVIC_Init(nvic_init_struct);
   \   00000032   0xA901             ADD      R1,SP,#+4
   \   00000034   0xB084             SUB      SP,SP,#+16
   \   00000036   0x4668             MOV      R0,SP
   \   00000038   0x2214             MOVS     R2,#+20
   \   0000003A   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000003E   0xBC0F             POP      {R0-R3}
   \   00000040   0x.... 0x....      BL       LPLD_NVIC_Init
     97            
     98            //配置PORTA_IRQn的抢占优先级为2
     99            nvic_init_struct.NVIC_IRQChannel = PORTA_IRQn;
   \   00000044   0x2057             MOVS     R0,#+87
   \   00000046   0xF88D 0x0004      STRB     R0,[SP, #+4]
    100            nvic_init_struct.NVIC_IRQChannelGroupPriority = NVIC_PriorityGroup_2;
   \   0000004A   0x2005             MOVS     R0,#+5
   \   0000004C   0x9002             STR      R0,[SP, #+8]
    101            nvic_init_struct.NVIC_IRQChannelPreemptionPriority = 1;
   \   0000004E   0x2001             MOVS     R0,#+1
   \   00000050   0x9003             STR      R0,[SP, #+12]
    102            nvic_init_struct.NVIC_IRQChannelEnable = TRUE;
   \   00000052   0x2001             MOVS     R0,#+1
   \   00000054   0xF88D 0x0014      STRB     R0,[SP, #+20]
    103            LPLD_NVIC_Init(nvic_init_struct);
   \   00000058   0xA901             ADD      R1,SP,#+4
   \   0000005A   0xB084             SUB      SP,SP,#+16
   \   0000005C   0x4668             MOV      R0,SP
   \   0000005E   0x2214             MOVS     R2,#+20
   \   00000060   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000064   0xBC0F             POP      {R0-R3}
   \   00000066   0x.... 0x....      BL       LPLD_NVIC_Init
    104            
    105            //配置UART4_IRQn的抢占优先级为1
    106            nvic_init_struct.NVIC_IRQChannel = UART4_RX_TX_IRQn;
   \   0000006A   0x2035             MOVS     R0,#+53
   \   0000006C   0xF88D 0x0004      STRB     R0,[SP, #+4]
    107            nvic_init_struct.NVIC_IRQChannelGroupPriority = NVIC_PriorityGroup_2;
   \   00000070   0x2005             MOVS     R0,#+5
   \   00000072   0x9002             STR      R0,[SP, #+8]
    108            nvic_init_struct.NVIC_IRQChannelPreemptionPriority = 0;
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x9003             STR      R0,[SP, #+12]
    109            nvic_init_struct.NVIC_IRQChannelEnable = TRUE;
   \   00000078   0x2001             MOVS     R0,#+1
   \   0000007A   0xF88D 0x0014      STRB     R0,[SP, #+20]
    110            LPLD_NVIC_Init(nvic_init_struct);
   \   0000007E   0xA901             ADD      R1,SP,#+4
   \   00000080   0xB084             SUB      SP,SP,#+16
   \   00000082   0x4668             MOV      R0,SP
   \   00000084   0x2214             MOVS     R2,#+20
   \   00000086   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000008A   0xBC0F             POP      {R0-R3}
   \   0000008C   0x.... 0x....      BL       LPLD_NVIC_Init
    111          }
   \   00000090   0xB007             ADD      SP,SP,#+28
   \   00000092   0xBD00             POP      {PC}             ;; return
    112          
    113          

   \                                 In section .text, align 2, keep-with-next
    114          void sensor_adc_init()
    115          {
   \                     sensor_adc_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    116            ADC_InitTypeDef sensor1_adc_init;
    117            sensor1_adc_init.ADC_Adcx = ADC1;	
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable12_6  ;; 0x400bb000
   \   00000008   0x9001             STR      R0,[SP, #+4]
    118            sensor1_adc_init.ADC_DiffMode = ADC_SE;       //单端采集	
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xF88D 0x0008      STRB     R0,[SP, #+8]
    119            sensor1_adc_init.ADC_BitMode = SE_8BIT;       //单端8位精度	
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF88D 0x0009      STRB     R0,[SP, #+9]
    120            sensor1_adc_init.ADC_SampleTimeCfg = SAMTIME_SHORT;    //短采样时间	
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x000A      STRB     R0,[SP, #+10]
    121            sensor1_adc_init.ADC_HwAvgSel = HW_4AVG;       //禁用硬件平均	
   \   0000001C   0x2004             MOVS     R0,#+4
   \   0000001E   0xF88D 0x000C      STRB     R0,[SP, #+12]
    122            sensor1_adc_init.ADC_CalEnable = TRUE; //使能初始化校验	
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0xF88D 0x000F      STRB     R0,[SP, #+15]
    123            sensor1_adc_init.ADC_MuxSel = MUX_ADXXA;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xF88D 0x000E      STRB     R0,[SP, #+14]
    124            LPLD_ADC_Init(sensor1_adc_init);
   \   0000002E   0xA901             ADD      R1,SP,#+4
   \   00000030   0xB084             SUB      SP,SP,#+16
   \   00000032   0x4668             MOV      R0,SP
   \   00000034   0x2214             MOVS     R2,#+20
   \   00000036   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000003A   0xBC0F             POP      {R0-R3}
   \   0000003C   0x.... 0x....      BL       LPLD_ADC_Init
    125            LPLD_ADC_Chn_Enable(ADC1, AD13);     //AD5--5
   \   00000040   0x210D             MOVS     R1,#+13
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable12_6  ;; 0x400bb000
   \   00000046   0x.... 0x....      BL       LPLD_ADC_Chn_Enable
    126            LPLD_ADC_Chn_Enable(ADC1, AD12);    //AD6--0
   \   0000004A   0x210C             MOVS     R1,#+12
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable12_6  ;; 0x400bb000
   \   00000050   0x.... 0x....      BL       LPLD_ADC_Chn_Enable
    127            LPLD_ADC_Chn_Enable(ADC1, AD14);    //AD8--1
   \   00000054   0x210E             MOVS     R1,#+14
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable12_6  ;; 0x400bb000
   \   0000005A   0x.... 0x....      BL       LPLD_ADC_Chn_Enable
    128            LPLD_ADC_Chn_Enable(ADC1, AD15);    //AD7--2
   \   0000005E   0x210F             MOVS     R1,#+15
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable12_6  ;; 0x400bb000
   \   00000064   0x.... 0x....      BL       LPLD_ADC_Chn_Enable
    129            LPLD_ADC_Chn_Enable(ADC1, AD10);    //AD4--3
   \   00000068   0x210A             MOVS     R1,#+10
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable12_6  ;; 0x400bb000
   \   0000006E   0x.... 0x....      BL       LPLD_ADC_Chn_Enable
    130            LPLD_ADC_Chn_Enable(ADC1, AD11);    //AD3--4
   \   00000072   0x210B             MOVS     R1,#+11
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable12_6  ;; 0x400bb000
   \   00000078   0x.... 0x....      BL       LPLD_ADC_Chn_Enable
    131            LPLD_ADC_Chn_Enable(ADC1, AD8);     //AD2--6
   \   0000007C   0x2108             MOVS     R1,#+8
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable12_6  ;; 0x400bb000
   \   00000082   0x.... 0x....      BL       LPLD_ADC_Chn_Enable
    132            LPLD_ADC_Chn_Enable(ADC1, AD9);     
   \   00000086   0x2109             MOVS     R1,#+9
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable12_6  ;; 0x400bb000
   \   0000008C   0x.... 0x....      BL       LPLD_ADC_Chn_Enable
    133          }
   \   00000090   0xB007             ADD      SP,SP,#+28
   \   00000092   0xBD00             POP      {PC}             ;; return
    134          

   \                                 In section .text, align 2, keep-with-next
    135          void Rudder_ftm2_init()
    136          {  
   \                     Rudder_ftm2_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
    137            FTM_InitTypeDef Rudder_ftm2_init;
    138            Rudder_ftm2_init.FTM_Ftmx = FTM2;           
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable12_7  ;; 0x400b8000
   \   00000008   0x9003             STR      R0,[SP, #+12]
    139            Rudder_ftm2_init.FTM_Mode = FTM_MODE_PWM;   
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0xF88D 0x0010      STRB     R0,[SP, #+16]
    140            Rudder_ftm2_init.FTM_PwmFreq = 300;          
   \   00000010   0xF44F 0x7096      MOV      R0,#+300
   \   00000014   0x9005             STR      R0,[SP, #+20]
    141            Rudder_ftm2_init.FTM_Isr = NULL;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x9009             STR      R0,[SP, #+36]
    142            LPLD_FTM_Init(Rudder_ftm2_init);  
   \   0000001A   0xA903             ADD      R1,SP,#+12
   \   0000001C   0xB084             SUB      SP,SP,#+16
   \   0000001E   0x4668             MOV      R0,SP
   \   00000020   0x221C             MOVS     R2,#+28
   \   00000022   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000026   0xBC0F             POP      {R0-R3}
   \   00000028   0x.... 0x....      BL       LPLD_FTM_Init
    143            
    144            LPLD_FTM_PWM_Enable(FTM2, FTM_Ch1, Rudder_Init, PTA11, ALIGN_LEFT);   
   \   0000002C   0x2028             MOVS     R0,#+40
   \   0000002E   0x9000             STR      R0,[SP, #+0]
   \   00000030   0x230B             MOVS     R3,#+11
   \   00000032   0x....             LDR.N    R0,??DataTable12_8
   \   00000034   0x6802             LDR      R2,[R0, #+0]
   \   00000036   0x2101             MOVS     R1,#+1
   \   00000038   0x....             LDR.N    R0,??DataTable12_7  ;; 0x400b8000
   \   0000003A   0x.... 0x....      BL       LPLD_FTM_PWM_Enable
    145          }
   \   0000003E   0xB00B             ADD      SP,SP,#+44
   \   00000040   0xBD00             POP      {PC}             ;; return
    146          

   \                                 In section .text, align 2, keep-with-next
    147          void Motor_ftm0_init()
    148          {
   \                     Motor_ftm0_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
    149            FTM_InitTypeDef motor_ftm0_init;
    150            motor_ftm0_init.FTM_Ftmx = FTM0;           
   \   00000004   0x....             LDR.N    R0,??DataTable12_9  ;; 0x40038000
   \   00000006   0x9003             STR      R0,[SP, #+12]
    151            motor_ftm0_init.FTM_Mode = FTM_MODE_PWM;   
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xF88D 0x0010      STRB     R0,[SP, #+16]
    152            motor_ftm0_init.FTM_PwmFreq = 25000;          
   \   0000000E   0xF246 0x10A8      MOVW     R0,#+25000
   \   00000012   0x9005             STR      R0,[SP, #+20]
    153            motor_ftm0_init.FTM_Isr = NULL;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x9009             STR      R0,[SP, #+36]
    154            LPLD_FTM_Init(motor_ftm0_init);    
   \   00000018   0xA903             ADD      R1,SP,#+12
   \   0000001A   0xB084             SUB      SP,SP,#+16
   \   0000001C   0x4668             MOV      R0,SP
   \   0000001E   0x221C             MOVS     R2,#+28
   \   00000020   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000024   0xBC0F             POP      {R0-R3}
   \   00000026   0x.... 0x....      BL       LPLD_FTM_Init
    155            LPLD_FTM_PWM_Enable(FTM0, FTM_Ch1, 0, PTA4, ALIGN_LEFT); 
   \   0000002A   0x2028             MOVS     R0,#+40
   \   0000002C   0x9000             STR      R0,[SP, #+0]
   \   0000002E   0x2304             MOVS     R3,#+4
   \   00000030   0x2200             MOVS     R2,#+0
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0x....             LDR.N    R0,??DataTable12_9  ;; 0x40038000
   \   00000036   0x.... 0x....      BL       LPLD_FTM_PWM_Enable
    156            LPLD_FTM_PWM_Enable(FTM0, FTM_Ch2, 0, PTA5, ALIGN_LEFT); 
   \   0000003A   0x2028             MOVS     R0,#+40
   \   0000003C   0x9000             STR      R0,[SP, #+0]
   \   0000003E   0x2305             MOVS     R3,#+5
   \   00000040   0x2200             MOVS     R2,#+0
   \   00000042   0x2102             MOVS     R1,#+2
   \   00000044   0x....             LDR.N    R0,??DataTable12_9  ;; 0x40038000
   \   00000046   0x.... 0x....      BL       LPLD_FTM_PWM_Enable
    157          }
   \   0000004A   0xB00B             ADD      SP,SP,#+44
   \   0000004C   0xBD00             POP      {PC}             ;; return
    158          

   \                                 In section .text, align 2, keep-with-next
    159          void qd_ftm1_init()
    160          {
   \                     qd_ftm1_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
    161            FTM_InitTypeDef QD_init_struct;
    162            QD_init_struct.FTM_Ftmx = FTM1;  //初始化右编码器
   \   00000004   0x....             LDR.N    R0,??DataTable12_10  ;; 0x40039000
   \   00000006   0x9003             STR      R0,[SP, #+12]
    163            QD_init_struct.FTM_Mode = FTM_MODE_QD; 
   \   00000008   0x2004             MOVS     R0,#+4
   \   0000000A   0xF88D 0x0010      STRB     R0,[SP, #+16]
    164            QD_init_struct.FTM_QdMode = QD_MODE_PHAB;  
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xF88D 0x001E      STRB     R0,[SP, #+30]
    165            QD_init_struct.FTM_ToiEnable = FALSE;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xF88D 0x0020      STRB     R0,[SP, #+32]
    166            LPLD_FTM_Init(QD_init_struct);
   \   0000001A   0xA903             ADD      R1,SP,#+12
   \   0000001C   0xB084             SUB      SP,SP,#+16
   \   0000001E   0x4668             MOV      R0,SP
   \   00000020   0x221C             MOVS     R2,#+28
   \   00000022   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000026   0xBC0F             POP      {R0-R3}
   \   00000028   0x.... 0x....      BL       LPLD_FTM_Init
    167            LPLD_FTM_QD_Enable(FTM1, PTA8, PTA9); 
   \   0000002C   0x2209             MOVS     R2,#+9
   \   0000002E   0x2108             MOVS     R1,#+8
   \   00000030   0x....             LDR.N    R0,??DataTable12_10  ;; 0x40039000
   \   00000032   0x.... 0x....      BL       LPLD_FTM_QD_Enable
    168          }
   \   00000036   0xB00B             ADD      SP,SP,#+44
   \   00000038   0xBD00             POP      {PC}             ;; return
    169          

   \                                 In section .text, align 2, keep-with-next
    170          void pit_hcsr04_init()
    171          {
    172            //开启定时模块时钟
    173            SIM->SCGC6 |= SIM_SCGC6_PIT_MASK;
   \                     pit_hcsr04_init: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable12_11  ;; 0x4004803c
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF450 0x0000      ORRS     R0,R0,#0x800000
   \   00000008   0x....             LDR.N    R1,??DataTable12_11  ;; 0x4004803c
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    174            PIT->MCR = 0x00;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x....             LDR.N    R1,??DataTable12_12  ;; 0x40037000
   \   00000010   0x6008             STR      R0,[R1, #+0]
    175            PIT->CHANNEL[1].LDVAL = 0x20000000;
   \   00000012   0xF05F 0x5000      MOVS     R0,#+536870912
   \   00000016   0x....             LDR.N    R1,??DataTable12_13  ;; 0x40037110
   \   00000018   0x6008             STR      R0,[R1, #+0]
    176            PIT->CHANNEL[1].TCTRL = PIT_TCTRL_TEN_MASK; 
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x....             LDR.N    R1,??DataTable12_14  ;; 0x40037118
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    177            PIT->CHANNEL[1].TFLG |= PIT_TFLG_TIF_MASK; 
   \   00000020   0x....             LDR.N    R0,??DataTable12_15  ;; 0x4003711c
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000028   0x....             LDR.N    R1,??DataTable12_15  ;; 0x4003711c
   \   0000002A   0x6008             STR      R0,[R1, #+0]
    178          }
   \   0000002C   0x4770             BX       LR               ;; return
    179          

   \                                 In section .text, align 2, keep-with-next
    180          void DialSwitch_init()
    181          {
   \                     DialSwitch_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    182            //拨码开关： PTD7->1, PTD6->2, PTD9->3, PTD8->4
    183            GPIO_InitTypeDef  DialSwitch_init_struct;
    184            DialSwitch_init_struct.GPIO_PTx = PTD;
   \   00000004   0x....             LDR.N    R0,??DataTable12_16  ;; 0x400ff0c0
   \   00000006   0x9001             STR      R0,[SP, #+4]
    185            DialSwitch_init_struct.GPIO_Pins = GPIO_Pin7|GPIO_Pin6|GPIO_Pin9|GPIO_Pin8|GPIO_Pin10|GPIO_Pin11;
   \   00000008   0xF44F 0x607C      MOV      R0,#+4032
   \   0000000C   0x9002             STR      R0,[SP, #+8]
    186            DialSwitch_init_struct.GPIO_PinControl = IRQC_DIS;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x9003             STR      R0,[SP, #+12]
    187            DialSwitch_init_struct.GPIO_Dir = DIR_INPUT;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xF88D 0x0010      STRB     R0,[SP, #+16]
    188            DialSwitch_init_struct.GPIO_Isr = NULL;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x9005             STR      R0,[SP, #+20]
    189            LPLD_GPIO_Init(DialSwitch_init_struct);    
   \   0000001C   0xA901             ADD      R1,SP,#+4
   \   0000001E   0xB084             SUB      SP,SP,#+16
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0x2214             MOVS     R2,#+20
   \   00000024   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000028   0xBC0F             POP      {R0-R3}
   \   0000002A   0x.... 0x....      BL       LPLD_GPIO_Init
    190          }
   \   0000002E   0xB007             ADD      SP,SP,#+28
   \   00000030   0xBD00             POP      {PC}             ;; return
    191          

   \                                 In section .text, align 2, keep-with-next
    192          void KeyBoard_init()
    193          {
   \                     KeyBoard_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    194            //按键： PTD1->3, PTD0->4, PTD3->5
    195            GPIO_InitTypeDef  KeyBoard_init_struct;
    196            KeyBoard_init_struct.GPIO_PTx = PTD;
   \   00000004   0x....             LDR.N    R0,??DataTable12_16  ;; 0x400ff0c0
   \   00000006   0x9001             STR      R0,[SP, #+4]
    197            KeyBoard_init_struct.GPIO_Pins = GPIO_Pin1|GPIO_Pin0|GPIO_Pin3;
   \   00000008   0x200B             MOVS     R0,#+11
   \   0000000A   0x9002             STR      R0,[SP, #+8]
    198            KeyBoard_init_struct.GPIO_PinControl = IRQC_DIS;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x9003             STR      R0,[SP, #+12]
    199            KeyBoard_init_struct.GPIO_Dir = DIR_INPUT;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF88D 0x0010      STRB     R0,[SP, #+16]
    200            KeyBoard_init_struct.GPIO_Isr = NULL;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x9005             STR      R0,[SP, #+20]
    201            LPLD_GPIO_Init(KeyBoard_init_struct);
   \   0000001A   0xA901             ADD      R1,SP,#+4
   \   0000001C   0xB084             SUB      SP,SP,#+16
   \   0000001E   0x4668             MOV      R0,SP
   \   00000020   0x2214             MOVS     R2,#+20
   \   00000022   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000026   0xBC0F             POP      {R0-R3}
   \   00000028   0x.... 0x....      BL       LPLD_GPIO_Init
    202            
    203            //  PTC14->1 , PTC15->2
    204            KeyBoard_init_struct.GPIO_PTx = PTC;
   \   0000002C   0x....             LDR.N    R0,??DataTable12_17  ;; 0x400ff080
   \   0000002E   0x9001             STR      R0,[SP, #+4]
    205            KeyBoard_init_struct.GPIO_Pins = GPIO_Pin14|GPIO_Pin15;
   \   00000030   0xF44F 0x4040      MOV      R0,#+49152
   \   00000034   0x9002             STR      R0,[SP, #+8]
    206            KeyBoard_init_struct.GPIO_PinControl = IRQC_DIS;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x9003             STR      R0,[SP, #+12]
    207            KeyBoard_init_struct.GPIO_Dir = DIR_INPUT;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0xF88D 0x0010      STRB     R0,[SP, #+16]
    208            KeyBoard_init_struct.GPIO_Isr = NULL;
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x9005             STR      R0,[SP, #+20]
    209            LPLD_GPIO_Init(KeyBoard_init_struct);
   \   00000044   0xA901             ADD      R1,SP,#+4
   \   00000046   0xB084             SUB      SP,SP,#+16
   \   00000048   0x4668             MOV      R0,SP
   \   0000004A   0x2214             MOVS     R2,#+20
   \   0000004C   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000050   0xBC0F             POP      {R0-R3}
   \   00000052   0x.... 0x....      BL       LPLD_GPIO_Init
    210          }
   \   00000056   0xB007             ADD      SP,SP,#+28
   \   00000058   0xBD00             POP      {PC}             ;; return
    211          

   \                                 In section .text, align 2, keep-with-next
    212          void Led_init()
    213          {
   \                     Led_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    214            //尾灯LED
    215            GPIO_InitTypeDef  BoardLed_init_struct;
    216            BoardLed_init_struct.GPIO_PTx = PTD;
   \   00000004   0x....             LDR.N    R0,??DataTable12_16  ;; 0x400ff0c0
   \   00000006   0x9001             STR      R0,[SP, #+4]
    217            BoardLed_init_struct.GPIO_Pins = GPIO_Pin2|GPIO_Pin4|GPIO_Pin5;
   \   00000008   0x2034             MOVS     R0,#+52
   \   0000000A   0x9002             STR      R0,[SP, #+8]
    218            BoardLed_init_struct.GPIO_PinControl = IRQC_DIS|OUTPUT_DSH;
   \   0000000C   0x2040             MOVS     R0,#+64
   \   0000000E   0x9003             STR      R0,[SP, #+12]
    219            BoardLed_init_struct.GPIO_Dir = DIR_OUTPUT;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xF88D 0x0010      STRB     R0,[SP, #+16]
    220            BoardLed_init_struct.GPIO_Output = OUTPUT_L;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x0011      STRB     R0,[SP, #+17]
    221            BoardLed_init_struct.GPIO_Isr = NULL;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x9005             STR      R0,[SP, #+20]
    222            LPLD_GPIO_Init(BoardLed_init_struct);    
   \   00000020   0xA901             ADD      R1,SP,#+4
   \   00000022   0xB084             SUB      SP,SP,#+16
   \   00000024   0x4668             MOV      R0,SP
   \   00000026   0x2214             MOVS     R2,#+20
   \   00000028   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000002C   0xBC0F             POP      {R0-R3}
   \   0000002E   0x.... 0x....      BL       LPLD_GPIO_Init
    223            
    224          //  //核心板LED: PTE26, PTD15, PTC0, PTA17  
    225            GPIO_InitTypeDef CoreLed2_init_struct;
    226            CoreLed2_init_struct.GPIO_PTx = PTA;
   \   00000032   0x....             LDR.N    R0,??DataTable12_3  ;; 0x400ff000
   \   00000034   0x9001             STR      R0,[SP, #+4]
    227            CoreLed2_init_struct.GPIO_Pins = GPIO_Pin17;
   \   00000036   0xF45F 0x3000      MOVS     R0,#+131072
   \   0000003A   0x9002             STR      R0,[SP, #+8]
    228            CoreLed2_init_struct.GPIO_PinControl = OUTPUT_DSH|IRQC_DIS;
   \   0000003C   0x2040             MOVS     R0,#+64
   \   0000003E   0x9003             STR      R0,[SP, #+12]
    229            CoreLed2_init_struct.GPIO_Dir = DIR_OUTPUT;
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0xF88D 0x0010      STRB     R0,[SP, #+16]
    230            CoreLed2_init_struct.GPIO_Output = OUTPUT_H;
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0xF88D 0x0011      STRB     R0,[SP, #+17]
    231            CoreLed2_init_struct.GPIO_Isr = NULL;
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x9005             STR      R0,[SP, #+20]
    232            LPLD_GPIO_Init(CoreLed2_init_struct);    
   \   00000050   0xA901             ADD      R1,SP,#+4
   \   00000052   0xB084             SUB      SP,SP,#+16
   \   00000054   0x4668             MOV      R0,SP
   \   00000056   0x2214             MOVS     R2,#+20
   \   00000058   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000005C   0xBC0F             POP      {R0-R3}
   \   0000005E   0x.... 0x....      BL       LPLD_GPIO_Init
    233           
    234            GPIO_InitTypeDef CoreLed3_init_struct;
    235            CoreLed3_init_struct.GPIO_PTx = PTC;
   \   00000062   0x....             LDR.N    R0,??DataTable12_17  ;; 0x400ff080
   \   00000064   0x9001             STR      R0,[SP, #+4]
    236            CoreLed3_init_struct.GPIO_Pins = GPIO_Pin0;
   \   00000066   0x2001             MOVS     R0,#+1
   \   00000068   0x9002             STR      R0,[SP, #+8]
    237            CoreLed3_init_struct.GPIO_PinControl = OUTPUT_DSH|IRQC_DIS;
   \   0000006A   0x2040             MOVS     R0,#+64
   \   0000006C   0x9003             STR      R0,[SP, #+12]
    238            CoreLed3_init_struct.GPIO_Dir = DIR_OUTPUT;
   \   0000006E   0x2001             MOVS     R0,#+1
   \   00000070   0xF88D 0x0010      STRB     R0,[SP, #+16]
    239            CoreLed3_init_struct.GPIO_Output = OUTPUT_H;
   \   00000074   0x2001             MOVS     R0,#+1
   \   00000076   0xF88D 0x0011      STRB     R0,[SP, #+17]
    240            CoreLed3_init_struct.GPIO_Isr = NULL;
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0x9005             STR      R0,[SP, #+20]
    241            LPLD_GPIO_Init(CoreLed3_init_struct);     
   \   0000007E   0xA901             ADD      R1,SP,#+4
   \   00000080   0xB084             SUB      SP,SP,#+16
   \   00000082   0x4668             MOV      R0,SP
   \   00000084   0x2214             MOVS     R2,#+20
   \   00000086   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000008A   0xBC0F             POP      {R0-R3}
   \   0000008C   0x.... 0x....      BL       LPLD_GPIO_Init
    242          }
   \   00000090   0xB007             ADD      SP,SP,#+28
   \   00000092   0xBD00             POP      {PC}             ;; return
    243          

   \                                 In section .text, align 2, keep-with-next
    244          void Stop_init()
    245          {
   \                     Stop_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    246            GPIO_InitTypeDef Stop_init_struct;
    247            Stop_init_struct.GPIO_PTx = PTC;
   \   00000004   0x....             LDR.N    R0,??DataTable12_17  ;; 0x400ff080
   \   00000006   0x9001             STR      R0,[SP, #+4]
    248            Stop_init_struct.GPIO_Pins = GPIO_Pin10;
   \   00000008   0xF44F 0x6080      MOV      R0,#+1024
   \   0000000C   0x9002             STR      R0,[SP, #+8]
    249            Stop_init_struct.GPIO_PinControl = IRQC_FA;
   \   0000000E   0xF45F 0x2020      MOVS     R0,#+655360
   \   00000012   0x9003             STR      R0,[SP, #+12]
    250            Stop_init_struct.GPIO_Dir = DIR_INPUT;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xF88D 0x0010      STRB     R0,[SP, #+16]
    251            Stop_init_struct.GPIO_Isr = Stop_Isr;
   \   0000001A   0x....             LDR.N    R0,??DataTable12_18
   \   0000001C   0x9005             STR      R0,[SP, #+20]
    252            
    253            LPLD_GPIO_Init(Stop_init_struct);       
   \   0000001E   0xA901             ADD      R1,SP,#+4
   \   00000020   0xB084             SUB      SP,SP,#+16
   \   00000022   0x4668             MOV      R0,SP
   \   00000024   0x2214             MOVS     R2,#+20
   \   00000026   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000002A   0xBC0F             POP      {R0-R3}
   \   0000002C   0x.... 0x....      BL       LPLD_GPIO_Init
    254            LPLD_GPIO_EnableIrq(Stop_init_struct);
   \   00000030   0xA901             ADD      R1,SP,#+4
   \   00000032   0xB084             SUB      SP,SP,#+16
   \   00000034   0x4668             MOV      R0,SP
   \   00000036   0x2214             MOVS     R2,#+20
   \   00000038   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000003C   0xBC0F             POP      {R0-R3}
   \   0000003E   0x.... 0x....      BL       LPLD_GPIO_EnableIrq
    255          }
   \   00000042   0xB007             ADD      SP,SP,#+28
   \   00000044   0xBD00             POP      {PC}             ;; return
    256          
    257          
    258          

   \                                 In section .text, align 2, keep-with-next
    259          void OLED_Init(void)
    260          {
   \                     OLED_Init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    261            
    262            GPIO_InitTypeDef OLED;
    263            OLED.GPIO_PTx = PTD;
   \   00000004   0x....             LDR.N    R0,??DataTable12_16  ;; 0x400ff0c0
   \   00000006   0x9001             STR      R0,[SP, #+4]
    264            OLED.GPIO_Pins = GPIO_Pin12|GPIO_Pin13|GPIO_Pin14|GPIO_Pin15;
   \   00000008   0xF44F 0x4070      MOV      R0,#+61440
   \   0000000C   0x9002             STR      R0,[SP, #+8]
    265            OLED.GPIO_PinControl = OUTPUT_DSH|IRQC_DIS;
   \   0000000E   0x2040             MOVS     R0,#+64
   \   00000010   0x9003             STR      R0,[SP, #+12]
    266            OLED.GPIO_Dir = DIR_OUTPUT;
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0xF88D 0x0010      STRB     R0,[SP, #+16]
    267            OLED.GPIO_Output = OUTPUT_H;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xF88D 0x0011      STRB     R0,[SP, #+17]
    268            OLED.GPIO_Isr = NULL;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x9005             STR      R0,[SP, #+20]
    269            LPLD_GPIO_Init(OLED);
   \   00000022   0xA901             ADD      R1,SP,#+4
   \   00000024   0xB084             SUB      SP,SP,#+16
   \   00000026   0x4668             MOV      R0,SP
   \   00000028   0x2214             MOVS     R2,#+20
   \   0000002A   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000002E   0xBC0F             POP      {R0-R3}
   \   00000030   0x.... 0x....      BL       LPLD_GPIO_Init
    270            
    271            
    272            OLED_SCL(1);
   \   00000034   0x2201             MOVS     R2,#+1
   \   00000036   0x210D             MOVS     R1,#+13
   \   00000038   0x....             LDR.N    R0,??DataTable12_16  ;; 0x400ff0c0
   \   0000003A   0x.... 0x....      BL       LPLD_GPIO_Output_b
    273            OLED_SDA(1);
   \   0000003E   0x2201             MOVS     R2,#+1
   \   00000040   0x210C             MOVS     R1,#+12
   \   00000042   0x....             LDR.N    R0,??DataTable12_16  ;; 0x400ff0c0
   \   00000044   0x.... 0x....      BL       LPLD_GPIO_Output_b
    274            OLED_RST(0);
   \   00000048   0x2200             MOVS     R2,#+0
   \   0000004A   0x210F             MOVS     R1,#+15
   \   0000004C   0x....             LDR.N    R0,??DataTable12_16  ;; 0x400ff0c0
   \   0000004E   0x.... 0x....      BL       LPLD_GPIO_Output_b
    275            OLED_DC(1); 
   \   00000052   0x2201             MOVS     R2,#+1
   \   00000054   0x210E             MOVS     R1,#+14
   \   00000056   0x....             LDR.N    R0,??DataTable12_16  ;; 0x400ff0c0
   \   00000058   0x.... 0x....      BL       LPLD_GPIO_Output_b
    276          
    277            OLED_SCL(1);
   \   0000005C   0x2201             MOVS     R2,#+1
   \   0000005E   0x210D             MOVS     R1,#+13
   \   00000060   0x....             LDR.N    R0,??DataTable12_16  ;; 0x400ff0c0
   \   00000062   0x.... 0x....      BL       LPLD_GPIO_Output_b
    278            OLED_RST(0);  
   \   00000066   0x2200             MOVS     R2,#+0
   \   00000068   0x210F             MOVS     R1,#+15
   \   0000006A   0x....             LDR.N    R0,??DataTable12_16  ;; 0x400ff0c0
   \   0000006C   0x.... 0x....      BL       LPLD_GPIO_Output_b
    279            LPLD_LPTMR_DelayMs(50);
   \   00000070   0x2032             MOVS     R0,#+50
   \   00000072   0x.... 0x....      BL       LPLD_LPTMR_DelayMs
    280            OLED_RST(1);
   \   00000076   0x2201             MOVS     R2,#+1
   \   00000078   0x210F             MOVS     R1,#+15
   \   0000007A   0x....             LDR.N    R0,??DataTable12_16  ;; 0x400ff0c0
   \   0000007C   0x.... 0x....      BL       LPLD_GPIO_Output_b
    281          
    282            
    283            OLED_WrCmd(0xae);//--turn off oled panel
   \   00000080   0x20AE             MOVS     R0,#+174
   \   00000082   0x.... 0x....      BL       OLED_WrCmd
    284            OLED_WrCmd(0x00);//---set low column address
   \   00000086   0x2000             MOVS     R0,#+0
   \   00000088   0x.... 0x....      BL       OLED_WrCmd
    285            OLED_WrCmd(0x10);//---set high column address
   \   0000008C   0x2010             MOVS     R0,#+16
   \   0000008E   0x.... 0x....      BL       OLED_WrCmd
    286            OLED_WrCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
   \   00000092   0x2040             MOVS     R0,#+64
   \   00000094   0x.... 0x....      BL       OLED_WrCmd
    287            OLED_WrCmd(0x81);//--set contrast control register
   \   00000098   0x2081             MOVS     R0,#+129
   \   0000009A   0x.... 0x....      BL       OLED_WrCmd
    288            OLED_WrCmd(0xcf); // Set SEG Output Current Brightness
   \   0000009E   0x20CF             MOVS     R0,#+207
   \   000000A0   0x.... 0x....      BL       OLED_WrCmd
    289            OLED_WrCmd(0xa1);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
   \   000000A4   0x20A1             MOVS     R0,#+161
   \   000000A6   0x.... 0x....      BL       OLED_WrCmd
    290            OLED_WrCmd(0xc8);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
   \   000000AA   0x20C8             MOVS     R0,#+200
   \   000000AC   0x.... 0x....      BL       OLED_WrCmd
    291            OLED_WrCmd(0xa6);//--set normal display
   \   000000B0   0x20A6             MOVS     R0,#+166
   \   000000B2   0x.... 0x....      BL       OLED_WrCmd
    292            OLED_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
   \   000000B6   0x20A8             MOVS     R0,#+168
   \   000000B8   0x.... 0x....      BL       OLED_WrCmd
    293            OLED_WrCmd(0x3f);//--1/64 duty
   \   000000BC   0x203F             MOVS     R0,#+63
   \   000000BE   0x.... 0x....      BL       OLED_WrCmd
    294            OLED_WrCmd(0xd3);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
   \   000000C2   0x20D3             MOVS     R0,#+211
   \   000000C4   0x.... 0x....      BL       OLED_WrCmd
    295            OLED_WrCmd(0x00);//-not offset
   \   000000C8   0x2000             MOVS     R0,#+0
   \   000000CA   0x.... 0x....      BL       OLED_WrCmd
    296            OLED_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
   \   000000CE   0x20D5             MOVS     R0,#+213
   \   000000D0   0x.... 0x....      BL       OLED_WrCmd
    297            OLED_WrCmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
   \   000000D4   0x2080             MOVS     R0,#+128
   \   000000D6   0x.... 0x....      BL       OLED_WrCmd
    298            OLED_WrCmd(0xd9);//--set pre-charge period
   \   000000DA   0x20D9             MOVS     R0,#+217
   \   000000DC   0x.... 0x....      BL       OLED_WrCmd
    299            OLED_WrCmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
   \   000000E0   0x20F1             MOVS     R0,#+241
   \   000000E2   0x.... 0x....      BL       OLED_WrCmd
    300            OLED_WrCmd(0xda);//--set com pins hardware configuration
   \   000000E6   0x20DA             MOVS     R0,#+218
   \   000000E8   0x.... 0x....      BL       OLED_WrCmd
    301            OLED_WrCmd(0x12);
   \   000000EC   0x2012             MOVS     R0,#+18
   \   000000EE   0x.... 0x....      BL       OLED_WrCmd
    302            OLED_WrCmd(0xdb);//--set vcomh
   \   000000F2   0x20DB             MOVS     R0,#+219
   \   000000F4   0x.... 0x....      BL       OLED_WrCmd
    303            OLED_WrCmd(0x40);//Set VCOM Deselect Level
   \   000000F8   0x2040             MOVS     R0,#+64
   \   000000FA   0x.... 0x....      BL       OLED_WrCmd
    304            OLED_WrCmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
   \   000000FE   0x2020             MOVS     R0,#+32
   \   00000100   0x.... 0x....      BL       OLED_WrCmd
    305            OLED_WrCmd(0x02);//
   \   00000104   0x2002             MOVS     R0,#+2
   \   00000106   0x.... 0x....      BL       OLED_WrCmd
    306            OLED_WrCmd(0x8d);//--set Charge Pump enable/disable
   \   0000010A   0x208D             MOVS     R0,#+141
   \   0000010C   0x.... 0x....      BL       OLED_WrCmd
    307            OLED_WrCmd(0x14);//--set(0x10) disable
   \   00000110   0x2014             MOVS     R0,#+20
   \   00000112   0x.... 0x....      BL       OLED_WrCmd
    308            OLED_WrCmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
   \   00000116   0x20A4             MOVS     R0,#+164
   \   00000118   0x.... 0x....      BL       OLED_WrCmd
    309            OLED_WrCmd(0xa6);// Disable Inverse Display On (0xa6/a7)
   \   0000011C   0x20A6             MOVS     R0,#+166
   \   0000011E   0x.... 0x....      BL       OLED_WrCmd
    310            OLED_WrCmd(0xaf);//--turn on oled panel
   \   00000122   0x20AF             MOVS     R0,#+175
   \   00000124   0x.... 0x....      BL       OLED_WrCmd
    311            OLED_Fill(0x00);  //初始清屏
   \   00000128   0x2000             MOVS     R0,#+0
   \   0000012A   0x.... 0x....      BL       OLED_Fill
    312            OLED_Set_Pos(0,0);
   \   0000012E   0x2100             MOVS     R1,#+0
   \   00000130   0x2000             MOVS     R0,#+0
   \   00000132   0x.... 0x....      BL       OLED_Set_Pos
    313          
    314          }
   \   00000136   0xB007             ADD      SP,SP,#+28
   \   00000138   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x400EA000         DC32     0x400ea000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x........         DC32     RecData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x400FF100         DC32     0x400ff100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0x400FF000         DC32     0x400ff000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \   00000000   0x........         DC32     UltraDis_Measure

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_5:
   \   00000000   0x........         DC32     pit_10ms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_6:
   \   00000000   0x400BB000         DC32     0x400bb000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_7:
   \   00000000   0x400B8000         DC32     0x400b8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_8:
   \   00000000   0x........         DC32     Rudder_Init

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_9:
   \   00000000   0x40038000         DC32     0x40038000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_10:
   \   00000000   0x40039000         DC32     0x40039000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_11:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_12:
   \   00000000   0x40037000         DC32     0x40037000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_13:
   \   00000000   0x40037110         DC32     0x40037110

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_14:
   \   00000000   0x40037118         DC32     0x40037118

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_15:
   \   00000000   0x4003711C         DC32     0x4003711c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_16:
   \   00000000   0x400FF0C0         DC32     0x400ff0c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_17:
   \   00000000   0x400FF080         DC32     0x400ff080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_18:
   \   00000000   0x........         DC32     Stop_Isr

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   DialSwitch_init
        32   -> LPLD_GPIO_Init
        48   -> __aeabi_memcpy4
       8   HardwareInit
         8   -> DialSwitch_init
         8   -> KeyBoard_init
         8   -> LPLD_LPTMR_DelayMs
         8   -> Led_init
         8   -> Motor_ftm0_init
         8   -> OLED_Init
         8   -> Rudder_ftm2_init
         8   -> Stop_init
         8   -> bluetooth_uart4_init
         8   -> hcsr04_init
         8   -> nvic_init
         8   -> pit_hcsr04_init
         8   -> qd_ftm1_init
         8   -> sensor_adc_init
      48   KeyBoard_init
        32   -> LPLD_GPIO_Init
        48   -> __aeabi_memcpy4
      48   Led_init
        32   -> LPLD_GPIO_Init
        48   -> __aeabi_memcpy4
      64   Motor_ftm0_init
        48   -> LPLD_FTM_Init
        48   -> LPLD_FTM_PWM_Enable
        64   -> __aeabi_memcpy4
      48   OLED_Init
        32   -> LPLD_GPIO_Init
        32   -> LPLD_GPIO_Output_b
        32   -> LPLD_LPTMR_DelayMs
        32   -> OLED_Fill
        32   -> OLED_Set_Pos
        32   -> OLED_WrCmd
        48   -> __aeabi_memcpy4
      64   Rudder_ftm2_init
        48   -> LPLD_FTM_Init
        48   -> LPLD_FTM_PWM_Enable
        64   -> __aeabi_memcpy4
      48   Stop_init
        32   -> LPLD_GPIO_EnableIrq
        32   -> LPLD_GPIO_Init
        48   -> __aeabi_memcpy4
      64   bluetooth_uart4_init
        48   -> LPLD_GPIO_Init
        48   -> LPLD_UART_EnableIrq
        48   -> LPLD_UART_Init
        64   -> __aeabi_memcpy4
      48   hcsr04_init
        32   -> LPLD_GPIO_EnableIrq
        32   -> LPLD_GPIO_Init
        48   -> __aeabi_memcpy4
      48   nvic_init
        32   -> LPLD_NVIC_Init
        48   -> __aeabi_memcpy4
      48   pit_10ms_init
        32   -> LPLD_PIT_EnableIrq
        32   -> LPLD_PIT_Init
        48   -> __aeabi_memcpy4
       0   pit_hcsr04_init
      64   qd_ftm1_init
        48   -> LPLD_FTM_Init
        48   -> LPLD_FTM_QD_Enable
        64   -> __aeabi_memcpy4
      48   sensor_adc_init
        32   -> LPLD_ADC_Chn_Enable
        32   -> LPLD_ADC_Init
        48   -> __aeabi_memcpy4


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_10
       4  ??DataTable12_11
       4  ??DataTable12_12
       4  ??DataTable12_13
       4  ??DataTable12_14
       4  ??DataTable12_15
       4  ??DataTable12_16
       4  ??DataTable12_17
       4  ??DataTable12_18
       4  ??DataTable12_2
       4  ??DataTable12_3
       4  ??DataTable12_4
       4  ??DataTable12_5
       4  ??DataTable12_6
       4  ??DataTable12_7
       4  ??DataTable12_8
       4  ??DataTable12_9
      50  DialSwitch_init
      64  HardwareInit
      90  KeyBoard_init
     148  Led_init
      78  Motor_ftm0_init
     314  OLED_Init
      66  Rudder_ftm2_init
      70  Stop_init
     180  bluetooth_uart4_init
      74  hcsr04_init
     148  nvic_init
      68  pit_10ms_init
      46  pit_hcsr04_init
      58  qd_ftm1_init
     148  sensor_adc_init

 
 1 678 bytes in section .text
 
 1 678 bytes of CODE memory

Errors: none
Warnings: none
