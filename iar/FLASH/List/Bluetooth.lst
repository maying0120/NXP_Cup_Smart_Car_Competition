###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        10/Jul/2017  21:37:27
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\app\Bluetooth.c
#    Command line =  
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\app\Bluetooth.c
#        -D LPLD_K60 -D USE_K60F12 -lCN
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\FLASH\List\
#        -lB
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\FLASH\List\
#        -o
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4F -e --fpu=None --dlib_config
#        D:\IAR\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\app\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\common\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\..\..\..\lib\USB\class\
#        -Ol -I D:\IAR\arm\CMSIS\Include\ -D ARM_MATH_CM4
#    List file    =  
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\FLASH\List\Bluetooth.lst
#    Object file  =  
#        C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\iar\FLASH\Obj\Bluetooth.o
#
###############################################################################

C:\Users\lenovo\Desktop\17智能车省赛\LPLD_OSKinetis_V3\project\chase_after（完整程序）\app\Bluetooth.c
      1          #include "Includes.h"
      2          
      3          #define UartDataNum  17	
      4          #define FreeCarsDataNum (UartDataNum*2)
      5          

   \                                 In section .bss, align 4
      6          uint8 uSendBuf[UartDataNum*2]={0};
   \                     uSendBuf:
   \   00000000                      DS8 36

   \                                 In section .bss, align 1
      7          uint8 Data_Receive = 0;
   \                     Data_Receive:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
      8          uint8 Stop_Behind = 0;
   \                     Stop_Behind:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
      9          uint8 CommuCheck;
   \                     CommuCheck:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     10          uint8 CommuCheck_Last = 0;
   \                     CommuCheck_Last:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     11          uint8 CommuCheck_Last_Last = 0;
   \                     CommuCheck_Last_Last:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     12          uint8 SendData_Status = 0;
   \                     SendData_Status:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     13          uint8 SendCommand_Arise = 0;
   \                     SendCommand_Arise:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     14          uint8 SendCommand_Clear = 0;
   \                     SendCommand_Clear:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     15          uint8 SendCommand_Arise_Cnt = 0;
   \                     SendCommand_Arise_Cnt:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     16          uint8 Case3_Turn = 0;
   \                     Case3_Turn:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     17          uint8 AheadStop_BehindAccel = 0;
   \                     AheadStop_BehindAccel:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     18          uint8 AheadStop_BehindStop = 0;
   \                     AheadStop_BehindStop:
   \   00000000                      DS8 1
     19          extern int Pre_Error[];
     20          extern int node;
     21          extern int Sum_peak2;
     22          extern int EnterStrai_SumDis;
     23          extern int sum_error;
     24          extern int Distance;
     25          extern int Count;
     26          extern int peak[];
     27          extern int Error;
     28          extern int Pre_Peak5[];
     29          extern int Grid_Error;
     30          extern int Flag_Island_Confirm;
     31          extern int RampAdmit_Distance;
     32          extern int Ms100_Distance;
     33          extern int EncoderDis_Ahead;
     34          extern int EncoderDis_Behind;
     35          extern int Mixed_Distance;
     36          extern int CrossRoad_Distance;
     37          extern int CrossRoadGap_Dis;
     38          extern long int IslandAdmit_Distance;
     39          extern int EnterCurve_SumDis;
     40          extern int trendSum_Peak1[];
     41          extern int trendSum_Peak2[];
     42          extern int trendSum_Peak3[];
     43          extern int Derivative_Error;
     44          extern int Case1_AheadLeave_Dis;
     45          extern long int Behind_EnterRamp_AdmitDis;
     46          extern int16 gyro_x;
     47          extern int16 gyro_y;
     48          extern int16 gyro_z;
     49          extern float Ave_absError;
     50          extern struct Speed Spd;
     51          extern struct Rudder Angle;
     52          extern uint8 Single_Run;
     53          extern uint8 Spd_Set_ZeroStart;
     54          extern uint8 Flag_Island_Position;
     55          extern uint8 Dir_IslandTurn;
     56          extern uint8 final;
     57          extern uint8 OverTake_Island;
     58          extern uint8 SendCommand;
     59          extern uint8 Turn_Around;
     60          extern uint8 Flag_Island;
     61          extern uint8 Flag_Ramp;
     62          extern uint8 Case1_AheadLeave_Wait;
     63          extern uint8 Flag_Follow;
     64          extern uint8 Island_SpdDown;
     65          extern uint8 OverTake_Straight;
     66          extern uint8 Case2_Ahead_KeepSide;  
     67          extern uint8 Case2_Behind_KeepSide;
     68          extern uint8 OverTake_CrossRoad;
     69          extern uint8 Case3_Behind_Pass;
     70          extern uint8 Ahead_LeaveIsland_WaitFlag;
     71          extern float percent_ahead;
     72          void push(uint8 chanel,uint16 data);
     73          void produceScopeData(void);
     74          void sendDataToScope(void);
     75          
     76          
     77          /*
     78          Function: 发送数据给电脑
     79          Return: Null
     80          */

   \                                 In section .text, align 2, keep-with-next
     81          void SendData()
     82          {
   \                     SendData: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     83             SendData_To_PC();
   \   00000002   0x.... 0x....      BL       SendData_To_PC
     84          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
     85          
     86          
     87          /*
     88          Function: 接收中断服务函数
     89          Return: Null
     90          */

   \                                 In section .bss, align 4
     91          int uart_cnt;
   \                     uart_cnt:
   \   00000000                      DS8 4

   \                                 In section .text, align 2, keep-with-next
     92          void RecData(void)
     93          {
   \                     RecData: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     94             uart_cnt++;   
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable7
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x1C40             ADDS     R0,R0,#+1
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable7
   \   0000000E   0x6008             STR      R0,[R1, #+0]
     95             if(Turn_Around == 0)
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable7_1
   \   00000014   0x7800             LDRB     R0,[R0, #+0]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD102             BNE.N    ??RecData_0
     96               Receive_From_Behind();     
   \   0000001A   0x.... 0x....      BL       Receive_From_Behind
   \   0000001E   0xE001             B.N      ??RecData_1
     97             else
     98               Receive_From_Ahead();    
   \                     ??RecData_0: (+1)
   \   00000020   0x.... 0x....      BL       Receive_From_Ahead
     99          }
   \                     ??RecData_1: (+1)
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
    100          
    101          
    102          /*
    103          Function: 前车接收后车信号
    104          Return: Null
    105          */

   \                                 In section .text, align 2, keep-with-next
    106          void Receive_From_Behind()
    107          {
   \                     Receive_From_Behind: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    108             /***************数据解码******************/
    109             CommuCheck = LPLD_UART_GetChar(UART4);
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable7_2  ;; 0x400ea000
   \   00000006   0x.... 0x....      BL       LPLD_UART_GetChar
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable7_3
   \   0000000E   0x7008             STRB     R0,[R1, #+0]
    110                
    111             if(CommuCheck_Last==CommuCheck_Second && CommuCheck_Last_Last==CommuCheck_First)
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable7_4
   \   00000014   0x7800             LDRB     R0,[R0, #+0]
   \   00000016   0x28FE             CMP      R0,#+254
   \   00000018   0xD10A             BNE.N    ??Receive_From_Behind_0
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0x28FD             CMP      R0,#+253
   \   00000022   0xD105             BNE.N    ??Receive_From_Behind_0
    112                 Data_Receive = CommuCheck;
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable7_3
   \   00000028   0x7800             LDRB     R0,[R0, #+0]
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable7_6
   \   0000002E   0x7008             STRB     R0,[R1, #+0]
    113             if(CommuCheck==CommuCheck_First || CommuCheck==CommuCheck_Second)
   \                     ??Receive_From_Behind_0: (+1)
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable7_3
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0x28FD             CMP      R0,#+253
   \   00000038   0xD004             BEQ.N    ??Receive_From_Behind_1
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable7_3
   \   0000003E   0x7800             LDRB     R0,[R0, #+0]
   \   00000040   0x28FE             CMP      R0,#+254
   \   00000042   0xD10B             BNE.N    ??Receive_From_Behind_2
    114                {
    115                   CommuCheck_Last_Last = CommuCheck_Last;   
   \                     ??Receive_From_Behind_1: (+1)
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable7_4
   \   00000048   0x7800             LDRB     R0,[R0, #+0]
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable7_5
   \   0000004E   0x7008             STRB     R0,[R1, #+0]
    116                   CommuCheck_Last = CommuCheck;
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable7_3
   \   00000054   0x7800             LDRB     R0,[R0, #+0]
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable7_4
   \   0000005A   0x7008             STRB     R0,[R1, #+0]
    117                }
    118          
    119             /*************正常数据通信****************/   
    120             //后车发送双车距离给环岛
    121             if(Data_Receive>=MixedDis_Min && Data_Receive<=MixedDis_Max)
   \                     ??Receive_From_Behind_2: (+1)
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   00000060   0x7800             LDRB     R0,[R0, #+0]
   \   00000062   0x380A             SUBS     R0,R0,#+10
   \   00000064   0x2828             CMP      R0,#+40
   \   00000066   0xD208             BCS.N    ??Receive_From_Behind_3
    122               { 
    123                 Mixed_Distance = (Data_Receive - MixedDis_Step)*10;
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   0000006C   0x7800             LDRB     R0,[R0, #+0]
   \   0000006E   0x380A             SUBS     R0,R0,#+10
   \   00000070   0x210A             MOVS     R1,#+10
   \   00000072   0x4348             MULS     R0,R1,R0
   \   00000074   0x.... 0x....      LDR.W    R1,??DataTable7_7
   \   00000078   0x6008             STR      R0,[R1, #+0]
    124               }
    125          
    126             //Case1（环岛超车）情况下，后车出环岛后，前车启动
    127             if(Data_Receive == Case1_Behind_LeaveIsland)
   \                     ??Receive_From_Behind_3: (+1)
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   0000007E   0x7800             LDRB     R0,[R0, #+0]
   \   00000080   0x2866             CMP      R0,#+102
   \   00000082   0xD11C             BNE.N    ??Receive_From_Behind_4
    128               {
    129                  Case1_AheadLeave_Wait = 0;
   \   00000084   0x2000             MOVS     R0,#+0
   \   00000086   0x.... 0x....      LDR.W    R1,??DataTable7_8
   \   0000008A   0x7008             STRB     R0,[R1, #+0]
    130                  Case1_AheadLeave_Dis = 0;
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0x.... 0x....      LDR.W    R1,??DataTable7_9
   \   00000092   0x6008             STR      R0,[R1, #+0]
    131                  EnterStrai_SumDis = Pulse_Distance*100;   
   \   00000094   0xF44F 0x707A      MOV      R0,#+1000
   \   00000098   0x.... 0x....      LDR.W    R1,??DataTable7_10
   \   0000009C   0x6008             STR      R0,[R1, #+0]
    132                  
    133                  //环岛超车次数限制
    134                  if(OverTake_Island > No)
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable7_11
   \   000000A2   0x7800             LDRB     R0,[R0, #+0]
   \   000000A4   0x2800             CMP      R0,#+0
   \   000000A6   0xD00A             BEQ.N    ??Receive_From_Behind_4
    135                    {
    136                       OverTake_Island--;    
   \   000000A8   0x.... 0x....      LDR.W    R0,??DataTable7_11
   \   000000AC   0x7800             LDRB     R0,[R0, #+0]
   \   000000AE   0x1E40             SUBS     R0,R0,#+1
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable7_11
   \   000000B4   0x7008             STRB     R0,[R1, #+0]
    137                       //发指令给后车，环岛超车次数自减一次
    138                       SendCommand = Case1_OverTake_NumDown;
   \   000000B6   0x2067             MOVS     R0,#+103
   \   000000B8   0x.... 0x....      LDR.W    R1,??DataTable7_12
   \   000000BC   0x7008             STRB     R0,[R1, #+0]
    139                    }
    140               }
    141               
    142                  
    143             /*************重要数据匹配确认****************/
    144             //接收者确认身份
    145             if(Data_Receive>=Command_Start && Data_Receive<=Command_End)
   \                     ??Receive_From_Behind_4: (+1)
   \   000000BE   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   000000C2   0x7800             LDRB     R0,[R0, #+0]
   \   000000C4   0x3868             SUBS     R0,R0,#+104
   \   000000C6   0x282F             CMP      R0,#+47
   \   000000C8   0xD208             BCS.N    ??Receive_From_Behind_5
    146               if(SendData_Status == Reseter)
   \   000000CA   0x.... 0x....      LDR.W    R0,??DataTable7_13
   \   000000CE   0x7800             LDRB     R0,[R0, #+0]
   \   000000D0   0x2800             CMP      R0,#+0
   \   000000D2   0xD103             BNE.N    ??Receive_From_Behind_5
    147                  SendData_Status = Receiver;
   \   000000D4   0x2002             MOVS     R0,#+2
   \   000000D6   0x.... 0x....      LDR.W    R1,??DataTable7_13
   \   000000DA   0x7008             STRB     R0,[R1, #+0]
    148             
    149             //发送者收到接收者反馈的指令信号（SendCommand_Clear）时，不再重复发送指令
    150             if(SendData_Status == Sender)
   \                     ??Receive_From_Behind_5: (+1)
   \   000000DC   0x.... 0x....      LDR.W    R0,??DataTable7_13
   \   000000E0   0x7800             LDRB     R0,[R0, #+0]
   \   000000E2   0x2801             CMP      R0,#+1
   \   000000E4   0xD108             BNE.N    ??Receive_From_Behind_6
    151               {
    152                 if(Data_Receive == SendCommand_Arise);
    153                   {
    154                      SendCommand_Arise = 0;
   \   000000E6   0x2000             MOVS     R0,#+0
   \   000000E8   0x.... 0x....      LDR.W    R1,??DataTable7_14
   \   000000EC   0x7008             STRB     R0,[R1, #+0]
    155                      SendData_Status = Reseter;
   \   000000EE   0x2000             MOVS     R0,#+0
   \   000000F0   0x.... 0x....      LDR.W    R1,??DataTable7_13
   \   000000F4   0x7008             STRB     R0,[R1, #+0]
   \   000000F6   0xE010             B.N      ??Receive_From_Behind_7
    156                   }
    157               }
    158             
    159             //接收者接收到的信号为重要指令（SendCommand_Arise）时，反馈信号给发送者
    160             else if(SendData_Status == Receiver)
   \                     ??Receive_From_Behind_6: (+1)
   \   000000F8   0x.... 0x....      LDR.W    R0,??DataTable7_13
   \   000000FC   0x7800             LDRB     R0,[R0, #+0]
   \   000000FE   0x2802             CMP      R0,#+2
   \   00000100   0xD10B             BNE.N    ??Receive_From_Behind_7
    161               {
    162                 if(Data_Receive>=Command_Start && Data_Receive<=Command_End)
   \   00000102   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   00000106   0x7800             LDRB     R0,[R0, #+0]
   \   00000108   0x3868             SUBS     R0,R0,#+104
   \   0000010A   0x282F             CMP      R0,#+47
   \   0000010C   0xD205             BCS.N    ??Receive_From_Behind_7
    163                    SendCommand_Clear = Data_Receive;     
   \   0000010E   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   00000112   0x7800             LDRB     R0,[R0, #+0]
   \   00000114   0x.... 0x....      LDR.W    R1,??DataTable7_15
   \   00000118   0x7008             STRB     R0,[R1, #+0]
    164               }
    165          }
   \                     ??Receive_From_Behind_7: (+1)
   \   0000011A   0xBD01             POP      {R0,PC}          ;; return
    166          
    167          
    168          /*
    169          Function: 后车接收前车信号
    170          Return: Null
    171          */

   \                                 In section .text, align 2, keep-with-next
    172          void Receive_From_Ahead()
    173          {  
   \                     Receive_From_Ahead: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    174             CommuCheck = LPLD_UART_GetChar(UART4);
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable7_2  ;; 0x400ea000
   \   00000006   0x.... 0x....      BL       LPLD_UART_GetChar
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable7_3
   \   0000000E   0x7008             STRB     R0,[R1, #+0]
    175             
    176              /*****************数据解码*******************/
    177             if(CommuCheck_Last==CommuCheck_Second && CommuCheck_Last_Last==CommuCheck_First)
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable7_4
   \   00000014   0x7800             LDRB     R0,[R0, #+0]
   \   00000016   0x28FE             CMP      R0,#+254
   \   00000018   0xD10A             BNE.N    ??Receive_From_Ahead_0
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0x28FD             CMP      R0,#+253
   \   00000022   0xD105             BNE.N    ??Receive_From_Ahead_0
    178                 Data_Receive = CommuCheck;
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable7_3
   \   00000028   0x7800             LDRB     R0,[R0, #+0]
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable7_6
   \   0000002E   0x7008             STRB     R0,[R1, #+0]
    179             if(CommuCheck==CommuCheck_First || CommuCheck==CommuCheck_Second)
   \                     ??Receive_From_Ahead_0: (+1)
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable7_3
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0x28FD             CMP      R0,#+253
   \   00000038   0xD004             BEQ.N    ??Receive_From_Ahead_1
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable7_3
   \   0000003E   0x7800             LDRB     R0,[R0, #+0]
   \   00000040   0x28FE             CMP      R0,#+254
   \   00000042   0xD10B             BNE.N    ??Receive_From_Ahead_2
    180                {
    181                   CommuCheck_Last_Last = CommuCheck_Last;   
   \                     ??Receive_From_Ahead_1: (+1)
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable7_4
   \   00000048   0x7800             LDRB     R0,[R0, #+0]
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable7_5
   \   0000004E   0x7008             STRB     R0,[R1, #+0]
    182                   CommuCheck_Last = CommuCheck;
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable7_3
   \   00000054   0x7800             LDRB     R0,[R0, #+0]
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable7_4
   \   0000005A   0x7008             STRB     R0,[R1, #+0]
    183                }
    184             
    185             /*****************数据处理********************/
    186             switch (Data_Receive)
   \                     ??Receive_From_Ahead_2: (+1)
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   00000060   0x7800             LDRB     R0,[R0, #+0]
   \   00000062   0x2865             CMP      R0,#+101
   \   00000064   0xD012             BEQ.N    ??Receive_From_Ahead_3
   \   00000066   0x2867             CMP      R0,#+103
   \   00000068   0xD02C             BEQ.N    ??Receive_From_Ahead_4
   \   0000006A   0x2868             CMP      R0,#+104
   \   0000006C   0xD041             BEQ.N    ??Receive_From_Ahead_5
   \   0000006E   0x2869             CMP      R0,#+105
   \   00000070   0xD032             BEQ.N    ??Receive_From_Ahead_6
   \   00000072   0x286A             CMP      R0,#+106
   \   00000074   0xD035             BEQ.N    ??Receive_From_Ahead_7
   \   00000076   0x286B             CMP      R0,#+107
   \   00000078   0xD037             BEQ.N    ??Receive_From_Ahead_8
   \   0000007A   0x286C             CMP      R0,#+108
   \   0000007C   0xD01A             BEQ.N    ??Receive_From_Ahead_9
   \   0000007E   0x286E             CMP      R0,#+110
   \   00000080   0xD00B             BEQ.N    ??Receive_From_Ahead_10
   \   00000082   0x286F             CMP      R0,#+111
   \   00000084   0xD011             BEQ.N    ??Receive_From_Ahead_11
   \   00000086   0x2870             CMP      R0,#+112
   \   00000088   0xD00B             BEQ.N    ??Receive_From_Ahead_12
   \   0000008A   0xE03C             B.N      ??Receive_From_Ahead_13
    187              {
    188                 //后车接收前车的发车信号，然后发车,延时发车
    189                 case Start_Admit:
    190                  { 
    191                     LPLD_LPTMR_DelayMs(500);
   \                     ??Receive_From_Ahead_3: (+1)
   \   0000008C   0xF44F 0x70FA      MOV      R0,#+500
   \   00000090   0x.... 0x....      BL       LPLD_LPTMR_DelayMs
    192                     pit_10ms_init(); 
   \   00000094   0x.... 0x....      BL       pit_10ms_init
    193                  }
    194                 break;
   \   00000098   0xE035             B.N      ??Receive_From_Ahead_14
    195                
    196                 //前车停车，后车加速
    197                 case Ahead_Stop:
    198                  { 
    199                    AheadStop_BehindAccel = 1;
   \                     ??Receive_From_Ahead_10: (+1)
   \   0000009A   0x2001             MOVS     R0,#+1
   \   0000009C   0x....             LDR.N    R1,??DataTable7_16
   \   0000009E   0x7008             STRB     R0,[R1, #+0]
    200                  }
    201                 break;
   \   000000A0   0xE031             B.N      ??Receive_From_Ahead_14
    202                 
    203                 //前车停车，后车加速
    204                 case Ahead_Stop_Unexpected:
    205                  { 
    206                    AheadStop_BehindStop = 1;
   \                     ??Receive_From_Ahead_12: (+1)
   \   000000A2   0x2001             MOVS     R0,#+1
   \   000000A4   0x....             LDR.N    R1,??DataTable7_17
   \   000000A6   0x7008             STRB     R0,[R1, #+0]
    207                  }
    208                 break;
   \   000000A8   0xE02D             B.N      ??Receive_From_Ahead_14
    209                 
    210                 //后车允许进入环岛
    211                 case Ahead_EnterRamp:
    212                  { 
    213                    Behind_EnterRamp_AdmitDis = 500*100;
   \                     ??Receive_From_Ahead_11: (+1)
   \   000000AA   0xF24C 0x3050      MOVW     R0,#+50000
   \   000000AE   0x....             LDR.N    R1,??DataTable7_18
   \   000000B0   0x6008             STR      R0,[R1, #+0]
    214                  }
    215                 break;
   \   000000B2   0xE028             B.N      ??Receive_From_Ahead_14
    216                 
    217                 //环岛超车情况下，前车离开环岛时，后车启动
    218                 case Case1_Ahead_LeaveIsland:
    219                  {
    220                     Mixed_Distance = 300;
   \                     ??Receive_From_Ahead_9: (+1)
   \   000000B4   0xF44F 0x7096      MOV      R0,#+300
   \   000000B8   0x....             LDR.N    R1,??DataTable7_7
   \   000000BA   0x6008             STR      R0,[R1, #+0]
    221                     Flag_Follow = 1;
   \   000000BC   0x2001             MOVS     R0,#+1
   \   000000BE   0x....             LDR.N    R1,??DataTable7_19
   \   000000C0   0x7008             STRB     R0,[R1, #+0]
    222                  }
    223                 break;
   \   000000C2   0xE020             B.N      ??Receive_From_Ahead_14
    224          
    225                 
    226                // 环岛超车次数自减一次
    227                case Case1_OverTake_NumDown:
    228                  { 
    229                    if(OverTake_Island > No)
   \                     ??Receive_From_Ahead_4: (+1)
   \   000000C4   0x....             LDR.N    R0,??DataTable7_11
   \   000000C6   0x7800             LDRB     R0,[R0, #+0]
   \   000000C8   0x2800             CMP      R0,#+0
   \   000000CA   0xD004             BEQ.N    ??Receive_From_Ahead_15
    230                       OverTake_Island--;
   \   000000CC   0x....             LDR.N    R0,??DataTable7_11
   \   000000CE   0x7800             LDRB     R0,[R0, #+0]
   \   000000D0   0x1E40             SUBS     R0,R0,#+1
   \   000000D2   0x....             LDR.N    R1,??DataTable7_11
   \   000000D4   0x7008             STRB     R0,[R1, #+0]
    231                  }
    232                break;
   \                     ??Receive_From_Ahead_15: (+1)
   \   000000D6   0xE016             B.N      ??Receive_From_Ahead_14
    233                 
    234                //后车接收到该信号，减速并可以检测环岛
    235                case Admit_EnterIsland:
    236                 {
    237                    IslandAdmit_Distance = IslandAdmit_MaxDis*100;   
   \                     ??Receive_From_Ahead_6: (+1)
   \   000000D8   0xF24C 0x3050      MOVW     R0,#+50000
   \   000000DC   0x....             LDR.N    R1,??DataTable7_20
   \   000000DE   0x6008             STR      R0,[R1, #+0]
    238                 }
    239                 break; 
   \   000000E0   0xE011             B.N      ??Receive_From_Ahead_14
    240                     
    241                //后车进环岛时强制右转
    242                case Turn_Right:
    243                  {
    244                    Dir_IslandTurn = Turn_Right;
   \                     ??Receive_From_Ahead_7: (+1)
   \   000000E2   0x206A             MOVS     R0,#+106
   \   000000E4   0x....             LDR.N    R1,??DataTable7_21
   \   000000E6   0x7008             STRB     R0,[R1, #+0]
    245                  }
    246                 break;
   \   000000E8   0xE00D             B.N      ??Receive_From_Ahead_14
    247          
    248                //后车进环岛时强制左转
    249                case Turn_Left:
    250                   Dir_IslandTurn = Turn_Left;
   \                     ??Receive_From_Ahead_8: (+1)
   \   000000EA   0x206B             MOVS     R0,#+107
   \   000000EC   0x....             LDR.N    R1,??DataTable7_21
   \   000000EE   0x7008             STRB     R0,[R1, #+0]
    251                 break;
   \   000000F0   0xE009             B.N      ??Receive_From_Ahead_14
    252                
    253                //直道超车后车变前车
    254                case Case2_SwitchTurn:
    255                   {
    256                     Turn_Around = 0;
   \                     ??Receive_From_Ahead_5: (+1)
   \   000000F2   0x2000             MOVS     R0,#+0
   \   000000F4   0x....             LDR.N    R1,??DataTable7_1
   \   000000F6   0x7008             STRB     R0,[R1, #+0]
    257                     Case2_Ahead_KeepSide = 0;
   \   000000F8   0x2000             MOVS     R0,#+0
   \   000000FA   0x....             LDR.N    R1,??DataTable7_22
   \   000000FC   0x7008             STRB     R0,[R1, #+0]
    258                     Case2_Behind_KeepSide = 0;
   \   000000FE   0x2000             MOVS     R0,#+0
   \   00000100   0x....             LDR.N    R1,??DataTable7_23
   \   00000102   0x7008             STRB     R0,[R1, #+0]
    259                   }
    260                 break;
   \   00000104   0xE7FF             B.N      ??Receive_From_Ahead_14
    261                        
    262                 
    263                default:
    264                 break;
    265              }
    266            
    267             //后车接收前车100ms内运动距离
    268             if(Data_Receive>=EncoderDis_Step && Data_Receive<=EncoderDis_Max)
   \                     ??Receive_From_Ahead_13: (+1)
   \                     ??Receive_From_Ahead_14: (+1)
   \   00000106   0x....             LDR.N    R0,??DataTable7_6
   \   00000108   0x7800             LDRB     R0,[R0, #+0]
   \   0000010A   0x3832             SUBS     R0,R0,#+50
   \   0000010C   0x2832             CMP      R0,#+50
   \   0000010E   0xD204             BCS.N    ??Receive_From_Ahead_16
    269                EncoderDis_Ahead = Data_Receive - EncoderDis_Step;
   \   00000110   0x....             LDR.N    R0,??DataTable7_6
   \   00000112   0x7800             LDRB     R0,[R0, #+0]
   \   00000114   0x3832             SUBS     R0,R0,#+50
   \   00000116   0x....             LDR.N    R1,??DataTable7_24
   \   00000118   0x6008             STR      R0,[R1, #+0]
    270          
    271             
    272             /*************重要数据匹配确认****************/
    273             //接收者确认身份
    274             if(Data_Receive>=Command_Start && Data_Receive<=Command_End)
   \                     ??Receive_From_Ahead_16: (+1)
   \   0000011A   0x....             LDR.N    R0,??DataTable7_6
   \   0000011C   0x7800             LDRB     R0,[R0, #+0]
   \   0000011E   0x3868             SUBS     R0,R0,#+104
   \   00000120   0x282F             CMP      R0,#+47
   \   00000122   0xD206             BCS.N    ??Receive_From_Ahead_17
    275               if(SendData_Status == Reseter)
   \   00000124   0x....             LDR.N    R0,??DataTable7_13
   \   00000126   0x7800             LDRB     R0,[R0, #+0]
   \   00000128   0x2800             CMP      R0,#+0
   \   0000012A   0xD102             BNE.N    ??Receive_From_Ahead_17
    276                  SendData_Status = Receiver;
   \   0000012C   0x2002             MOVS     R0,#+2
   \   0000012E   0x....             LDR.N    R1,??DataTable7_13
   \   00000130   0x7008             STRB     R0,[R1, #+0]
    277             
    278             //发送者收到接收者反馈的指令信号（SendCommand_Clear）时，不再重复发送指令
    279             if(SendData_Status == Sender)
   \                     ??Receive_From_Ahead_17: (+1)
   \   00000132   0x....             LDR.N    R0,??DataTable7_13
   \   00000134   0x7800             LDRB     R0,[R0, #+0]
   \   00000136   0x2801             CMP      R0,#+1
   \   00000138   0xD106             BNE.N    ??Receive_From_Ahead_18
    280               {
    281                 if(Data_Receive == SendCommand_Arise);
    282                   {
    283                      SendCommand_Arise = 0;
   \   0000013A   0x2000             MOVS     R0,#+0
   \   0000013C   0x....             LDR.N    R1,??DataTable7_14
   \   0000013E   0x7008             STRB     R0,[R1, #+0]
    284                      SendData_Status = Reseter;
   \   00000140   0x2000             MOVS     R0,#+0
   \   00000142   0x....             LDR.N    R1,??DataTable7_13
   \   00000144   0x7008             STRB     R0,[R1, #+0]
   \   00000146   0xE00C             B.N      ??Receive_From_Ahead_19
    285                   }
    286               }
    287             
    288             //接收者接收到的信号为重要指令（SendCommand_Arise）时，反馈信号给发送者
    289             else if(SendData_Status == Receiver)
   \                     ??Receive_From_Ahead_18: (+1)
   \   00000148   0x....             LDR.N    R0,??DataTable7_13
   \   0000014A   0x7800             LDRB     R0,[R0, #+0]
   \   0000014C   0x2802             CMP      R0,#+2
   \   0000014E   0xD108             BNE.N    ??Receive_From_Ahead_19
    290               {
    291                 if(Data_Receive>=Command_Start && Data_Receive<=Command_End)
   \   00000150   0x....             LDR.N    R0,??DataTable7_6
   \   00000152   0x7800             LDRB     R0,[R0, #+0]
   \   00000154   0x3868             SUBS     R0,R0,#+104
   \   00000156   0x282F             CMP      R0,#+47
   \   00000158   0xD203             BCS.N    ??Receive_From_Ahead_19
    292                    SendCommand_Clear = Data_Receive;     
   \   0000015A   0x....             LDR.N    R0,??DataTable7_6
   \   0000015C   0x7800             LDRB     R0,[R0, #+0]
   \   0000015E   0x....             LDR.N    R1,??DataTable7_15
   \   00000160   0x7008             STRB     R0,[R1, #+0]
    293               }
    294          }
   \                     ??Receive_From_Ahead_19: (+1)
   \   00000162   0xBD01             POP      {R0,PC}          ;; return
    295          

   \                                 In section .text, align 2, keep-with-next
    296          void Command_Match()
    297          {
   \                     Command_Match: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    298            if(Count>200)
   \   00000002   0x....             LDR.N    R0,??DataTable7_25
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x28C9             CMP      R0,#+201
   \   00000008   0xDB1E             BLT.N    ??Command_Match_0
    299              {
    300                 //发送者重复发送重要指令给接收者，直到接收者反馈该信号则停止发送
    301                if(SendData_Status == Sender)
   \   0000000A   0x....             LDR.N    R0,??DataTable7_13
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xD108             BNE.N    ??Command_Match_1
    302                  {
    303                     if(SendCommand_Arise != 0)
   \   00000012   0x....             LDR.N    R0,??DataTable7_14
   \   00000014   0x7800             LDRB     R0,[R0, #+0]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD016             BEQ.N    ??Command_Match_0
    304                        Commu_Onetime(SendCommand_Arise);
   \   0000001A   0x....             LDR.N    R0,??DataTable7_14
   \   0000001C   0x7800             LDRB     R0,[R0, #+0]
   \   0000001E   0x.... 0x....      BL       Commu_Onetime
   \   00000022   0xE011             B.N      ??Command_Match_0
    305                  }
    306          
    307                 //接收者接收到重要指令信号时，反馈该信号给发送者，发送一次即可；
    308                 //因为如果发送者未接收到该反馈信号时，发送者会持续发送该指令信号，使得接收者的SendCommand_Clear不断被置起
    309                else if(SendData_Status == Receiver)
   \                     ??Command_Match_1: (+1)
   \   00000024   0x....             LDR.N    R0,??DataTable7_13
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0x2802             CMP      R0,#+2
   \   0000002A   0xD10D             BNE.N    ??Command_Match_0
    310                  {
    311                     if(SendCommand_Clear != 0)
   \   0000002C   0x....             LDR.N    R0,??DataTable7_15
   \   0000002E   0x7800             LDRB     R0,[R0, #+0]
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD009             BEQ.N    ??Command_Match_0
    312                      {
    313                         Commu_Onetime(SendCommand_Clear);      
   \   00000034   0x....             LDR.N    R0,??DataTable7_15
   \   00000036   0x7800             LDRB     R0,[R0, #+0]
   \   00000038   0x.... 0x....      BL       Commu_Onetime
    314                         SendCommand_Clear = 0;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x....             LDR.N    R1,??DataTable7_15
   \   00000040   0x7008             STRB     R0,[R1, #+0]
    315                         SendData_Status = Reseter; //接收者清除身份
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x....             LDR.N    R1,??DataTable7_13
   \   00000046   0x7008             STRB     R0,[R1, #+0]
    316                      }        
    317                  }
    318              }
    319          }
   \                     ??Command_Match_0: (+1)
   \   00000048   0xBD01             POP      {R0,PC}          ;; return
    320          
    321          
    322          /*
    323          Function: 发送数据给电脑
    324          Return: Null
    325          */

   \                                 In section .text, align 2, keep-with-next
    326          void SendData_To_PC()
    327          {
   \                     SendData_To_PC: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    328              produceScopeData();  //将数据储存于缓存数组 
   \   00000002   0x.... 0x....      BL       produceScopeData
    329              sendDataToScope();	 //发送参数到上位机
   \   00000006   0x.... 0x....      BL       sendDataToScope
    330          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    331          
    332          
    333          /*
    334          Function: 将数据压入缓存数组
    335          Return: Null
    336          */

   \                                 In section .text, align 2, keep-with-next
    337          void push(uint8 chanel,uint16 data)
    338          {
    339              uSendBuf[chanel*2]=data/256;
   \                     `push`: (+1)
   \   00000000   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000002   0xF44F 0x7280      MOV      R2,#+256
   \   00000006   0xFB91 0xF2F2      SDIV     R2,R1,R2
   \   0000000A   0x....             LDR.N    R3,??DataTable7_26
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0xF803 0x2010      STRB     R2,[R3, R0, LSL #+1]
    340              uSendBuf[chanel*2+1]=data%256;
   \   00000012   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000014   0xF44F 0x7280      MOV      R2,#+256
   \   00000018   0xFB91 0xF3F2      SDIV     R3,R1,R2
   \   0000001C   0xFB03 0x1312      MLS      R3,R3,R2,R1
   \   00000020   0x....             LDR.N    R1,??DataTable7_26
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0xEB11 0x0040      ADDS     R0,R1,R0, LSL #+1
   \   00000028   0x7043             STRB     R3,[R0, #+1]
    341          }
   \   0000002A   0x4770             BX       LR               ;; return
    342          
    343          
    344          extern int Ud;
    345          extern int Ud_error;
    346          extern int MaybeRamp_Distance;
    347          extern long int IslandGap_Distance;
    348          extern int RampIn_Distance;
    349          extern int Turn_Error;
    350          extern uint16 Ultra_Distance_Unfilter;
    351          extern uint16 Ultra_Distance_Filter;
    352          
    353          /*
    354          Function: 发送需要发送的数据
    355          Return: Null
    356          */

   \                                 In section .text, align 2, keep-with-next
    357          void produceScopeData(void)
    358          {
   \                     produceScopeData: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    359              push(0, peak[0]);
   \   00000002   0x....             LDR.N    R0,??DataTable7_27
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       `push`
    360              push(1, peak[1]);
   \   0000000E   0x....             LDR.N    R0,??DataTable7_27
   \   00000010   0x6841             LDR      R1,[R0, #+4]
   \   00000012   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       `push`
    361              push(2, peak[2]);
   \   0000001A   0x....             LDR.N    R0,??DataTable7_27
   \   0000001C   0x6881             LDR      R1,[R0, #+8]
   \   0000001E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000020   0x2002             MOVS     R0,#+2
   \   00000022   0x.... 0x....      BL       `push`
    362              push(3, peak[3]);
   \   00000026   0x....             LDR.N    R0,??DataTable7_27
   \   00000028   0x68C1             LDR      R1,[R0, #+12]
   \   0000002A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000002C   0x2003             MOVS     R0,#+3
   \   0000002E   0x.... 0x....      BL       `push`
    363              push(4, peak[4]);
   \   00000032   0x....             LDR.N    R0,??DataTable7_27
   \   00000034   0x6901             LDR      R1,[R0, #+16]
   \   00000036   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000038   0x2004             MOVS     R0,#+4
   \   0000003A   0x.... 0x....      BL       `push`
    364              push(5, peak[5]);
   \   0000003E   0x....             LDR.N    R0,??DataTable7_27
   \   00000040   0x6941             LDR      R1,[R0, #+20]
   \   00000042   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000044   0x2005             MOVS     R0,#+5
   \   00000046   0x.... 0x....      BL       `push`
    365              push(6, peak[6]);
   \   0000004A   0x....             LDR.N    R0,??DataTable7_27
   \   0000004C   0x6981             LDR      R1,[R0, #+24]
   \   0000004E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000050   0x2006             MOVS     R0,#+6
   \   00000052   0x.... 0x....      BL       `push`
    366              push(7, peak[7]);
   \   00000056   0x....             LDR.N    R0,??DataTable7_27
   \   00000058   0x69C1             LDR      R1,[R0, #+28]
   \   0000005A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000005C   0x2007             MOVS     R0,#+7
   \   0000005E   0x.... 0x....      BL       `push`
    367              push(8, Error);
   \   00000062   0x....             LDR.N    R0,??DataTable7_28
   \   00000064   0x6801             LDR      R1,[R0, #+0]
   \   00000066   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000068   0x2008             MOVS     R0,#+8
   \   0000006A   0x.... 0x....      BL       `push`
    368              push(9, Flag_Island_Confirm/100);
   \   0000006E   0x....             LDR.N    R0,??DataTable7_29
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0x2164             MOVS     R1,#+100
   \   00000074   0xFB90 0xF1F1      SDIV     R1,R0,R1
   \   00000078   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000007A   0x2009             MOVS     R0,#+9
   \   0000007C   0x.... 0x....      BL       `push`
    369              push(10,Spd.target);
   \   00000080   0x....             LDR.N    R0,??DataTable7_30
   \   00000082   0x6801             LDR      R1,[R0, #+0]
   \   00000084   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000086   0x200A             MOVS     R0,#+10
   \   00000088   0x.... 0x....      BL       `push`
    370              push(11,Spd.feedback);
   \   0000008C   0x....             LDR.N    R0,??DataTable7_30
   \   0000008E   0x6981             LDR      R1,[R0, #+24]
   \   00000090   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000092   0x200B             MOVS     R0,#+11
   \   00000094   0x.... 0x....      BL       `push`
    371              push(12,EnterCurve_SumDis/100);
   \   00000098   0x....             LDR.N    R0,??DataTable7_31
   \   0000009A   0x6800             LDR      R0,[R0, #+0]
   \   0000009C   0x2164             MOVS     R1,#+100
   \   0000009E   0xFB90 0xF1F1      SDIV     R1,R0,R1
   \   000000A2   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000A4   0x200C             MOVS     R0,#+12
   \   000000A6   0x.... 0x....      BL       `push`
    372              push(13,Spd.MotorPWM/10);
   \   000000AA   0x....             LDR.N    R0,??DataTable7_30
   \   000000AC   0xF8D0 0x0088      LDR      R0,[R0, #+136]
   \   000000B0   0x210A             MOVS     R1,#+10
   \   000000B2   0xFB90 0xF1F1      SDIV     R1,R0,R1
   \   000000B6   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000B8   0x200D             MOVS     R0,#+13
   \   000000BA   0x.... 0x....      BL       `push`
    373          //    push(14,15);
    374          //    push(15,16);
    375          //    push(16,17);
    376          }	 
   \   000000BE   0xBD01             POP      {R0,PC}          ;; return
    377          
    378           
    379          /*
    380          Function: 寄存器发送操作
    381          Return: Null
    382          */

   \                                 In section .text, align 2, keep-with-next
    383          void sendDataToScope(void)
    384          {
   \                     sendDataToScope: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    385            uint8 i,sum=0; 
   \   00000002   0x2500             MOVS     R5,#+0
    386            //使用轮询的方式发送数据，当数据未发送，程序停在此处直到发送完成
    387            LPLD_UART_PutChar(UART4, 251);
   \   00000004   0x21FB             MOVS     R1,#+251
   \   00000006   0x....             LDR.N    R0,??DataTable7_2  ;; 0x400ea000
   \   00000008   0x.... 0x....      BL       LPLD_UART_PutChar
    388            LPLD_UART_PutChar(UART4, 109);
   \   0000000C   0x216D             MOVS     R1,#+109
   \   0000000E   0x....             LDR.N    R0,??DataTable7_2  ;; 0x400ea000
   \   00000010   0x.... 0x....      BL       LPLD_UART_PutChar
    389            LPLD_UART_PutChar(UART4, 37);
   \   00000014   0x2125             MOVS     R1,#+37
   \   00000016   0x....             LDR.N    R0,??DataTable7_2  ;; 0x400ea000
   \   00000018   0x.... 0x....      BL       LPLD_UART_PutChar
    390            
    391            sum+=(251);                   
   \   0000001C   0x1F6D             SUBS     R5,R5,#+5
    392            sum+=(109);
   \   0000001E   0x356D             ADDS     R5,R5,#+109
    393            sum+=(37);
   \   00000020   0x3525             ADDS     R5,R5,#+37
    394            for(i=0;i<FreeCarsDataNum;i++)
   \   00000022   0x2400             MOVS     R4,#+0
   \   00000024   0xE00A             B.N      ??sendDataToScope_0
    395              {
    396                LPLD_UART_PutChar(UART4, uSendBuf[i]);
   \                     ??sendDataToScope_1: (+1)
   \   00000026   0x....             LDR.N    R0,??DataTable7_26
   \   00000028   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002A   0x5C21             LDRB     R1,[R4, R0]
   \   0000002C   0x....             LDR.N    R0,??DataTable7_2  ;; 0x400ea000
   \   0000002E   0x.... 0x....      BL       LPLD_UART_PutChar
    397                sum+=uSendBuf[i];          //全部数据加入校验
   \   00000032   0x....             LDR.N    R0,??DataTable7_26
   \   00000034   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000036   0x5C20             LDRB     R0,[R4, R0]
   \   00000038   0x1945             ADDS     R5,R0,R5
    398              }
   \   0000003A   0x1C64             ADDS     R4,R4,#+1
   \                     ??sendDataToScope_0: (+1)
   \   0000003C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003E   0x2C22             CMP      R4,#+34
   \   00000040   0xDBF1             BLT.N    ??sendDataToScope_1
    399            LPLD_UART_PutChar(UART4, sum);
   \   00000042   0x0029             MOVS     R1,R5
   \   00000044   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000046   0x....             LDR.N    R0,??DataTable7_2  ;; 0x400ea000
   \   00000048   0x.... 0x....      BL       LPLD_UART_PutChar
    400          }
   \   0000004C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    401          
    402          

   \                                 In section .text, align 2, keep-with-next
    403          void Commu_Onetime(uint8 data)
    404          {
   \                     Commu_Onetime: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    405             /*******************数据协议**********************/
    406             LPLD_UART_PutChar(UART4, CommuCheck_First);
   \   00000004   0x21FD             MOVS     R1,#+253
   \   00000006   0x....             LDR.N    R0,??DataTable7_2  ;; 0x400ea000
   \   00000008   0x.... 0x....      BL       LPLD_UART_PutChar
    407             LPLD_UART_PutChar(UART4, CommuCheck_Second); 
   \   0000000C   0x21FE             MOVS     R1,#+254
   \   0000000E   0x....             LDR.N    R0,??DataTable7_2  ;; 0x400ea000
   \   00000010   0x.... 0x....      BL       LPLD_UART_PutChar
    408             LPLD_UART_PutChar(UART4, data); 
   \   00000014   0x0021             MOVS     R1,R4
   \   00000016   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000018   0x....             LDR.N    R0,??DataTable7_2  ;; 0x400ea000
   \   0000001A   0x.... 0x....      BL       LPLD_UART_PutChar
    409             
    410             
    411             /***************命令区间的数据确认*****************/
    412             //接收者确认身份
    413             if(data>=Command_Start && data<=Command_End)
   \   0000001E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000020   0xF1B4 0x0068      SUBS     R0,R4,#+104
   \   00000024   0x282F             CMP      R0,#+47
   \   00000026   0xD206             BCS.N    ??Commu_Onetime_0
    414               if(SendData_Status == Reseter)
   \   00000028   0x....             LDR.N    R0,??DataTable7_13
   \   0000002A   0x7800             LDRB     R0,[R0, #+0]
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD102             BNE.N    ??Commu_Onetime_0
    415                  SendData_Status = Sender;
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x....             LDR.N    R1,??DataTable7_13
   \   00000034   0x7008             STRB     R0,[R1, #+0]
    416             
    417             if(data>=Command_Start && data<=Command_End)
   \                     ??Commu_Onetime_0: (+1)
   \   00000036   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000038   0xF1B4 0x0068      SUBS     R0,R4,#+104
   \   0000003C   0x282F             CMP      R0,#+47
   \   0000003E   0xD210             BCS.N    ??Commu_Onetime_1
    418               if(SendData_Status == Sender)
   \   00000040   0x....             LDR.N    R0,??DataTable7_13
   \   00000042   0x7800             LDRB     R0,[R0, #+0]
   \   00000044   0x2801             CMP      R0,#+1
   \   00000046   0xD10C             BNE.N    ??Commu_Onetime_1
    419                 if(SendCommand_Arise == 0)  //发送者只有第一次发送重要信息时会置起
   \   00000048   0x....             LDR.N    R0,??DataTable7_14
   \   0000004A   0x7800             LDRB     R0,[R0, #+0]
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD108             BNE.N    ??Commu_Onetime_1
    420                    {
    421                       if(SendCommand_Arise_Cnt == 0)
   \   00000050   0x....             LDR.N    R0,??DataTable7_32
   \   00000052   0x7800             LDRB     R0,[R0, #+0]
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD102             BNE.N    ??Commu_Onetime_2
    422                          SendCommand_Arise_Cnt = 1;
   \   00000058   0x2001             MOVS     R0,#+1
   \   0000005A   0x....             LDR.N    R1,??DataTable7_32
   \   0000005C   0x7008             STRB     R0,[R1, #+0]
    423                       SendCommand_Arise = data;
   \                     ??Commu_Onetime_2: (+1)
   \   0000005E   0x....             LDR.N    R0,??DataTable7_14
   \   00000060   0x7004             STRB     R4,[R0, #+0]
    424                    }
    425          }
   \                     ??Commu_Onetime_1: (+1)
   \   00000062   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     uart_cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     Turn_Around

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x400EA000         DC32     0x400ea000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     CommuCheck

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     CommuCheck_Last

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     CommuCheck_Last_Last

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     Data_Receive

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x........         DC32     Mixed_Distance

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x........         DC32     Case1_AheadLeave_Wait

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x........         DC32     Case1_AheadLeave_Dis

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x........         DC32     EnterStrai_SumDis

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   0x........         DC32     OverTake_Island

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \   00000000   0x........         DC32     SendCommand

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \   00000000   0x........         DC32     SendData_Status

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_14:
   \   00000000   0x........         DC32     SendCommand_Arise

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_15:
   \   00000000   0x........         DC32     SendCommand_Clear

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_16:
   \   00000000   0x........         DC32     AheadStop_BehindAccel

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_17:
   \   00000000   0x........         DC32     AheadStop_BehindStop

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_18:
   \   00000000   0x........         DC32     Behind_EnterRamp_AdmitDis

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_19:
   \   00000000   0x........         DC32     Flag_Follow

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_20:
   \   00000000   0x........         DC32     IslandAdmit_Distance

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_21:
   \   00000000   0x........         DC32     Dir_IslandTurn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_22:
   \   00000000   0x........         DC32     Case2_Ahead_KeepSide

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_23:
   \   00000000   0x........         DC32     Case2_Behind_KeepSide

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_24:
   \   00000000   0x........         DC32     EncoderDis_Ahead

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_25:
   \   00000000   0x........         DC32     Count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_26:
   \   00000000   0x........         DC32     uSendBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_27:
   \   00000000   0x........         DC32     peak

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_28:
   \   00000000   0x........         DC32     Error

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_29:
   \   00000000   0x........         DC32     Flag_Island_Confirm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_30:
   \   00000000   0x........         DC32     Spd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_31:
   \   00000000   0x........         DC32     EnterCurve_SumDis

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_32:
   \   00000000   0x........         DC32     SendCommand_Arise_Cnt

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Command_Match
         8   -> Commu_Onetime
       8   Commu_Onetime
         8   -> LPLD_UART_PutChar
       8   RecData
         8   -> Receive_From_Ahead
         8   -> Receive_From_Behind
       8   Receive_From_Ahead
         8   -> LPLD_LPTMR_DelayMs
         8   -> LPLD_UART_GetChar
         8   -> pit_10ms_init
       8   Receive_From_Behind
         8   -> LPLD_UART_GetChar
       8   SendData
         8   -> SendData_To_PC
       8   SendData_To_PC
         8   -> produceScopeData
         8   -> sendDataToScope
       8   produceScopeData
         8   -> push
       0   push
      16   sendDataToScope
        16   -> LPLD_UART_PutChar


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_15
       4  ??DataTable7_16
       4  ??DataTable7_17
       4  ??DataTable7_18
       4  ??DataTable7_19
       4  ??DataTable7_2
       4  ??DataTable7_20
       4  ??DataTable7_21
       4  ??DataTable7_22
       4  ??DataTable7_23
       4  ??DataTable7_24
       4  ??DataTable7_25
       4  ??DataTable7_26
       4  ??DataTable7_27
       4  ??DataTable7_28
       4  ??DataTable7_29
       4  ??DataTable7_3
       4  ??DataTable7_30
       4  ??DataTable7_31
       4  ??DataTable7_32
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
       1  AheadStop_BehindAccel
       1  AheadStop_BehindStop
       1  Case3_Turn
      74  Command_Match
       1  CommuCheck
       1  CommuCheck_Last
       1  CommuCheck_Last_Last
     100  Commu_Onetime
       1  Data_Receive
      38  RecData
     356  Receive_From_Ahead
     284  Receive_From_Behind
       1  SendCommand_Arise
       1  SendCommand_Arise_Cnt
       1  SendCommand_Clear
       8  SendData
       1  SendData_Status
      12  SendData_To_PC
       1  Stop_Behind
     192  produceScopeData
      44  push
      78  sendDataToScope
      36  uSendBuf
       4  uart_cnt

 
    52 bytes in section .bss
 1 318 bytes in section .text
 
 1 318 bytes of CODE memory
    52 bytes of DATA memory

Errors: none
Warnings: none
